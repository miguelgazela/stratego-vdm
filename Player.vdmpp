/**
  Player.

  <p>
  description
  </p>

  @version
  @author
*/

class Player

types
    public String = seq of char;
values

instance variables
    private name: String;
    private score: nat := 0;
    inv score >= 0;
    private pieces: seq of Piece := [];
    private deadPieces : seq of Piece := [];

operations

-- constructor for Player
public Player: String ==> Player
Player(name_) == (
    name := name_;                 
);

-- consult operations
public getName: () ==> String
getName() == (
    return name;
);

public getPieces: () ==> seq of Piece
getPieces() == (
    return pieces;
);

public getDeadPieces: () ==> seq of Piece
getDeadPieces() == (
    return deadPieces;
);

public getScore: () ==> nat
getScore() == (
    return score;
);


-- change operations
public addPiece: Piece ==> ()
addPiece(p) == (
    pieces := pieces ^ [p];
);
-- pre p nao pode ser nulo
-- post len pieces = len pieces~ + 1
-- post pieces = pieces~ ^ [p]

public setPieces: seq of Piece ==> ()
setPieces(pieces_) == (
    pieces := pieces_;
);

public placePiece: () ==> Piece
placePiece() == (
  dcl piece: Piece;
  piece := hd pieces;
  pieces := tl pieces;
  return piece;
);
--pre len pieces > 0

public addDeadPiece: Piece ==> ()
addDeadPiece(p) == (
    deadPieces := deadPieces ^ [p];                  
);
-- pre p nao pode ser nulo
-- post len deadPieces = len deadPieces~ + 1
-- post deadPieces = deadPieces~ ^ [p]

public incScore: () ==> ()
incScore () == (
    score := score + 1;
);                

public resetScore: () ==> ()
resetScore() == (
    score := 0;
);

functions

end Player
