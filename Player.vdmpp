/**
  Player.

  <p>
  description
  </p>

  @version
  @author
*/

class Player

types
    public String = seq of char;
values

instance variables
    private name: String;
    inv len name > 0;

    private score: nat := 0;
    inv score >= 0;

    private pieces: seq of Piece := [];
    inv len pieces <= 40;

    private deadPieces : seq of Piece := [];
    inv len deadPieces <= 40;

    private color: Piece`ColorPiece;
    inv color in set {<Blue>, <Red>};

operations

-- constructor for Player
public Player: String * Piece`ColorPiece ==> Player
Player(name_, color_) == (
    atomic (
      name := name_;
      color := color_; 
    );
    return self;                
)
pre len name_ > 0 and color_ in set {<Blue>, <Red>}
post (name = name_ and color = color_);

-- consult operations
public getName: () ==> String
getName() == (
    return name;
)
post RESULT = name and len RESULT > 0;

public getColor: () ==> Piece`ColorPiece
getColor() == (
    return color;
)
post RESULT = color and RESULT in set {<Blue>, <Red>};

public getPieces: () ==> seq of Piece
getPieces() == (
    return pieces;
)
post RESULT = pieces;

public getDeadPieces: () ==> seq of Piece
getDeadPieces() == (
    return deadPieces;
)
post RESULT = deadPieces;

public getScore: () ==> nat
getScore() == (
    return score;
)
post RESULT = score;


-- change operations
public addPiece: Piece ==> ()
addPiece(p) == (
    pieces := pieces ^ [p];
)
pre p not in set elems pieces and p.getColor() = color
post len pieces = len pieces~ + 1 and pieces = pieces~ ^ [p] and p in set elems pieces;

public setPieces: seq of Piece ==> ()
setPieces(pieces_) == (
    pieces := pieces_;
)
pre pieces = [] and len pieces_ = 40 and not exists piece in set elems pieces_ & piece.getColor() <> color
post pieces <> [] and len pieces = 40 and pieces = pieces_;

public removeAllPieces: () ==> ()
removeAllPieces() == (
  pieces := [];
  deadPieces := [];
)
pre pieces <> []
post pieces = [] and deadPieces = [];

public placePiece: () ==> Piece
placePiece() == (
  dcl piece: Piece;
  piece := hd pieces;
  pieces := tl pieces;
  return piece;
)
pre len pieces > 0
post len pieces = len pieces~ - 1 and RESULT = hd pieces~;

public getNextPiece: () ==> Piece
getNextPiece() == (
  return hd pieces;
)
pre len pieces > 0
post RESULT = hd pieces~;

public addDeadPiece: Piece ==> ()
addDeadPiece(p) == (
    deadPieces := deadPieces ^ [p];                  
)
pre p not in set elems pieces and p not in set elems deadPieces and p.getColor() = color
post len deadPieces = len deadPieces~ + 1 and deadPieces = deadPieces~ ^ [p] and p in set elems deadPieces;

public incScore: () ==> ()
incScore () == (
    score := score + 1;
)
post score = score~ + 1; 

public resetScore: () ==> ()
resetScore() == (
    score := 0;
)
post score = 0;

functions

end Player
