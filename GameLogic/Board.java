//
package GameLogic;
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2013-12-03 by the VDM++ to JAVA Code Generator
// (v9.0.2 - Thu 14-Mar-2013 12:36:47 +0900)
//
// Supported compilers: jdk 1.4/1.5/1.6
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// This file was genereted from "C:\\Users\\Miguel\\Dropbox\\projects\\stratego\\Board/Board.vdmpp".

// ***** VDMTOOLS START Name=package KEEP=NO
// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=NO
import java.util.Set;
import java.util.List;
import java.util.HashSet;
import java.util.Iterator;
import java.util.ArrayList;
import jp.vdmtools.VDM.UTIL;
import jp.vdmtools.VDM.Record;
import jp.vdmtools.VDM.Sentinel;
import jp.vdmtools.VDM.EvaluatePP;
import jp.vdmtools.VDM.CGException;
// ***** VDMTOOLS END Name=imports



public class Board implements EvaluatePP {

// ***** VDMTOOLS START Name=board KEEP=NO
  private volatile List board = null;
// ***** VDMTOOLS END Name=board

// ***** VDMTOOLS START Name=lakes KEEP=NO
  private volatile List lakes = null;
// ***** VDMTOOLS END Name=lakes

// ***** VDMTOOLS START Name=pieceCoordsP1 KEEP=NO
  private volatile List pieceCoordsP1 = null;
// ***** VDMTOOLS END Name=pieceCoordsP1

// ***** VDMTOOLS START Name=pieceCoordsP2 KEEP=NO
  private volatile List pieceCoordsP2 = null;
// ***** VDMTOOLS END Name=pieceCoordsP2

// ***** VDMTOOLS START Name=sentinel KEEP=NO
  volatile Sentinel sentinel;
// ***** VDMTOOLS END Name=sentinel


// ***** VDMTOOLS START Name=BoardSentinel KEEP=NO
  class BoardSentinel extends Sentinel {

    public final int Board = 0;

    public final int addPiece = 1;

    public final int getBoard = 2;

    public final int initBoard = 3;

    public final int initLakes = 4;

    public final int movePiece = 5;

    public final int placePiece = 6;

    public final int placePieces = 7;

    public final int removePiece = 8;

    public final int getLakeCoords = 9;

    public final int placePiecesP1 = 10;

    public final int placePiecesP2 = 11;

    public final int isPositionFree = 12;

    public final int isPositionLake = 13;

    public final int initPieceCoords = 14;

    public final int getPieceAtPosition = 15;

    public final int getNumberPiecesOnBoard = 16;

    public final int nr_functions = 17;


    public BoardSentinel () throws CGException {}


    public BoardSentinel (EvaluatePP instance) throws CGException {
      init(nr_functions, instance);
    }

  }
// ***** VDMTOOLS END Name=BoardSentinel
;

// ***** VDMTOOLS START Name=evaluatePP#1|int KEEP=NO
  public Boolean evaluatePP (int fnr) throws CGException {
    return Boolean.TRUE;
  }
// ***** VDMTOOLS END Name=evaluatePP#1|int


// ***** VDMTOOLS START Name=setSentinel KEEP=NO
  public void setSentinel () {
    try {
      sentinel = new BoardSentinel(this);
    }
    catch (Exception e) {
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=setSentinel

// ***** VDMTOOLS START Name=BOARDSIZE KEEP=NO
  public static final Number BOARDSIZE = new Integer(10);
// ***** VDMTOOLS END Name=BOARDSIZE

// ***** VDMTOOLS START Name=P1_INITIAL_Y KEEP=NO
  private static final Number P1_INITIAL_Y = new Integer(7);
// ***** VDMTOOLS END Name=P1_INITIAL_Y

// ***** VDMTOOLS START Name=P1_FINAL_Y KEEP=NO
  private static final Number P1_FINAL_Y = new Integer(10);
// ***** VDMTOOLS END Name=P1_FINAL_Y

// ***** VDMTOOLS START Name=P2_INITIAL_Y KEEP=NO
  private static final Number P2_INITIAL_Y = new Integer(1);
// ***** VDMTOOLS END Name=P2_INITIAL_Y

// ***** VDMTOOLS START Name=P2_FINAL_Y KEEP=NO
  private static final Number P2_FINAL_Y = new Integer(4);
// ***** VDMTOOLS END Name=P2_FINAL_Y


// ***** VDMTOOLS START Name=vdm_init_Board KEEP=NO
  private void vdm_init_Board () {
    try {
      setSentinel();
      board = new ArrayList();
      lakes = new ArrayList();
      pieceCoordsP1 = new ArrayList();
      pieceCoordsP2 = new ArrayList();
    }
    catch (Exception e) {
      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=vdm_init_Board


// ***** VDMTOOLS START Name=Board KEEP=NO
  public Board () throws CGException {
    try {
      vdm_init_Board();
      initBoard();
      initLakes();
      initPieceCoords();
      setSentinel();
    }
    catch (Throwable e) {
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=Board


// ***** VDMTOOLS START Name=getPieceAtPosition#1|Coord KEEP=NO
  public Piece getPieceAtPosition (final Coord pos) throws CGException {
    sentinel.entering(((BoardSentinel)sentinel).getPieceAtPosition);
    try {
      if (!this.pre_getPieceAtPosition(pos).booleanValue()) 
        UTIL.RunTime("Precondition failure in getPieceAtPosition");
      if ((1 > pos.getY().intValue()) || (pos.getY().intValue() > board.size())) 
        UTIL.RunTime("Illegal index");
      List argTmp_6 = new ArrayList(UTIL.ConvertToList(board.get(pos.getY().intValue() - 1)));
      if ((1 > pos.getX().intValue()) || (pos.getX().intValue() > argTmp_6.size())) 
        UTIL.RunTime("Illegal index");
      return ((Piece)argTmp_6.get(pos.getX().intValue() - 1));
    }
    finally {
      sentinel.leaving(((BoardSentinel)sentinel).getPieceAtPosition);
    }
  }
// ***** VDMTOOLS END Name=getPieceAtPosition#1|Coord


// ***** VDMTOOLS START Name=pre_getPieceAtPosition#1|Coord KEEP=NO
  public Boolean pre_getPieceAtPosition (final Coord pos) throws CGException {
    Boolean varRes_2 = null;
    Set var2_5 = new HashSet();
    var2_5 = new HashSet();
    int ubi_10 = BOARDSIZE.intValue();
    for (int count_8 = 1; count_8 <= ubi_10; count_8++) 
      var2_5.add(new Integer(count_8));
    if ((varRes_2 = Boolean.valueOf(UTIL.Contains(var2_5, pos.getX()))).booleanValue()) {
      Set var2_13 = new HashSet();
      var2_13 = new HashSet();
      int ubi_18 = BOARDSIZE.intValue();
      for (int count_16 = 1; count_16 <= ubi_18; count_16++) 
        var2_13.add(new Integer(count_16));
      varRes_2 = Boolean.valueOf(UTIL.Contains(var2_13, pos.getY()));
    }
    return varRes_2;
  }
// ***** VDMTOOLS END Name=pre_getPieceAtPosition#1|Coord


// ***** VDMTOOLS START Name=isPositionFree#1|Coord KEEP=NO
  public Boolean isPositionFree (final Coord pos) throws CGException {
    sentinel.entering(((BoardSentinel)sentinel).isPositionFree);
    try {
      if (!this.pre_isPositionFree(pos).booleanValue()) 
        UTIL.RunTime("Precondition failure in isPositionFree");
      Boolean rexpr_2 = null;
      if ((1 > pos.getY().intValue()) || (pos.getY().intValue() > board.size())) 
        UTIL.RunTime("Illegal index");
      List argTmp_8 = new ArrayList(UTIL.ConvertToList(board.get(pos.getY().intValue() - 1)));
      if ((1 > pos.getX().intValue()) || (pos.getX().intValue() > argTmp_8.size())) 
        UTIL.RunTime("Illegal index");
      if ((rexpr_2 = Boolean.valueOf(UTIL.equals(((Piece)argTmp_8.get(pos.getX().intValue() - 1)), null))).booleanValue()) 
        rexpr_2 = Boolean.valueOf(!isPositionLake(pos).booleanValue());
      return rexpr_2;
    }
    finally {
      sentinel.leaving(((BoardSentinel)sentinel).isPositionFree);
    }
  }
// ***** VDMTOOLS END Name=isPositionFree#1|Coord


// ***** VDMTOOLS START Name=pre_isPositionFree#1|Coord KEEP=NO
  public Boolean pre_isPositionFree (final Coord pos) throws CGException {
    Boolean varRes_2 = null;
    Set var2_5 = new HashSet();
    var2_5 = new HashSet();
    int ubi_10 = BOARDSIZE.intValue();
    for (int count_8 = 1; count_8 <= ubi_10; count_8++) 
      var2_5.add(new Integer(count_8));
    if ((varRes_2 = Boolean.valueOf(UTIL.Contains(var2_5, pos.getX()))).booleanValue()) {
      Set var2_13 = new HashSet();
      var2_13 = new HashSet();
      int ubi_18 = BOARDSIZE.intValue();
      for (int count_16 = 1; count_16 <= ubi_18; count_16++) 
        var2_13.add(new Integer(count_16));
      varRes_2 = Boolean.valueOf(UTIL.Contains(var2_13, pos.getY()));
    }
    return varRes_2;
  }
// ***** VDMTOOLS END Name=pre_isPositionFree#1|Coord


// ***** VDMTOOLS START Name=isPositionLake#1|Coord KEEP=NO
  public Boolean isPositionLake (final Coord pos) throws CGException {
    sentinel.entering(((BoardSentinel)sentinel).isPositionLake);
    try {
      if (!this.pre_isPositionLake(pos).booleanValue()) 
        UTIL.RunTime("Precondition failure in isPositionLake");
      boolean tmpQuant_3 = false;
      {
        Set e1_set_6 = new HashSet(lakes);
        Coord coord = null;
        Set tmpSet_13 = new HashSet(e1_set_6);
        for (Iterator enm_12 = tmpSet_13.iterator(); enm_12.hasNext() && !tmpQuant_3; ) {
          Coord elem_11 = (Coord)enm_12.next();
          /* coord */
          coord = elem_11;
          if (Coord.areEqual(pos, coord).booleanValue()) 
            tmpQuant_3 = true;
        }
      }
      return Boolean.valueOf(tmpQuant_3);
    }
    finally {
      sentinel.leaving(((BoardSentinel)sentinel).isPositionLake);
    }
  }
// ***** VDMTOOLS END Name=isPositionLake#1|Coord


// ***** VDMTOOLS START Name=pre_isPositionLake#1|Coord KEEP=NO
  public Boolean pre_isPositionLake (final Coord pos) throws CGException {
    Boolean varRes_2 = null;
    Set var2_5 = new HashSet();
    var2_5 = new HashSet();
    int ubi_10 = BOARDSIZE.intValue();
    for (int count_8 = 1; count_8 <= ubi_10; count_8++) 
      var2_5.add(new Integer(count_8));
    if ((varRes_2 = Boolean.valueOf(UTIL.Contains(var2_5, pos.getX()))).booleanValue()) {
      Set var2_13 = new HashSet();
      var2_13 = new HashSet();
      int ubi_18 = BOARDSIZE.intValue();
      for (int count_16 = 1; count_16 <= ubi_18; count_16++) 
        var2_13.add(new Integer(count_16));
      varRes_2 = Boolean.valueOf(UTIL.Contains(var2_13, pos.getY()));
    }
    return varRes_2;
  }
// ***** VDMTOOLS END Name=pre_isPositionLake#1|Coord


// ***** VDMTOOLS START Name=placePiecesP1#1|List KEEP=NO
  public void placePiecesP1 (final List pieces) throws CGException {
    sentinel.entering(((BoardSentinel)sentinel).placePiecesP1);
    try {
      if (!this.pre_placePiecesP1(pieces).booleanValue()) 
        UTIL.RunTime("Precondition failure in placePiecesP1");
      placePieces(pieces, new quotes.Blue());
    }
    finally {
      sentinel.leaving(((BoardSentinel)sentinel).placePiecesP1);
    }
  }
// ***** VDMTOOLS END Name=placePiecesP1#1|List


// ***** VDMTOOLS START Name=pre_placePiecesP1#1|List KEEP=NO
  public Boolean pre_placePiecesP1 (final List pieces) throws CGException {
    Boolean varRes_2 = null;
    if ((varRes_2 = Boolean.valueOf(pieces.size() == 40)).booleanValue()) {
      boolean tmpQuant_9 = false;
      {
        Set e1_set_12 = new HashSet(pieces);
        Piece piece1 = null;
        Piece piece2 = null;
        Set e_set_37 = e1_set_12;
        Set tmpSet_40 = new HashSet(e_set_37);
        for (Iterator enm_39 = tmpSet_40.iterator(); enm_39.hasNext() && !tmpQuant_9; ) {
          Piece elem_38 = (Piece)enm_39.next();
          /* piece2 */
          piece2 = elem_38;
          Set tmpSet_36 = new HashSet(e1_set_12);
          for (Iterator enm_35 = tmpSet_36.iterator(); enm_35.hasNext() && !tmpQuant_9; ) {
            Piece elem_34 = (Piece)enm_35.next();
            /* piece1 */
            piece1 = elem_34;
            Boolean pred_13 = null;
            Boolean var1_14 = null;
            if ((var1_14 = Boolean.valueOf(!UTIL.equals(piece1, piece2))).booleanValue()) 
              var1_14 = Boolean.valueOf(!UTIL.equals(piece1.getColor(), piece2.getColor()));
            if ((pred_13 = var1_14).booleanValue()) {
              boolean tmpQuant_22 = true;
              {
                Set e1_set_25 = new HashSet(pieces);
                Piece piece = null;
                Set tmpSet_32 = new HashSet(e1_set_25);
                for (Iterator enm_31 = tmpSet_32.iterator(); enm_31.hasNext() && tmpQuant_22; ) {
                  Piece elem_30 = (Piece)enm_31.next();
                  /* piece */
                  piece = elem_30;
                  if (!UTIL.equals(piece.getColor(), new quotes.Blue())) 
                    tmpQuant_22 = false;
                }
              }
              pred_13 = Boolean.valueOf(tmpQuant_22);
            }
            if (pred_13.booleanValue()) 
              tmpQuant_9 = true;
          }
        }
      }
      varRes_2 = Boolean.valueOf(!tmpQuant_9);
    }
    return varRes_2;
  }
// ***** VDMTOOLS END Name=pre_placePiecesP1#1|List


// ***** VDMTOOLS START Name=placePiecesP2#1|List KEEP=NO
  public void placePiecesP2 (final List pieces) throws CGException {
    sentinel.entering(((BoardSentinel)sentinel).placePiecesP2);
    try {
      if (!this.pre_placePiecesP2(pieces).booleanValue()) 
        UTIL.RunTime("Precondition failure in placePiecesP2");
      placePieces(pieces, new quotes.Red());
    }
    finally {
      sentinel.leaving(((BoardSentinel)sentinel).placePiecesP2);
    }
  }
// ***** VDMTOOLS END Name=placePiecesP2#1|List


// ***** VDMTOOLS START Name=pre_placePiecesP2#1|List KEEP=NO
  public Boolean pre_placePiecesP2 (final List pieces) throws CGException {
    Boolean varRes_2 = null;
    if ((varRes_2 = Boolean.valueOf(pieces.size() == 40)).booleanValue()) {
      boolean tmpQuant_8 = true;
      {
        Set e1_set_11 = new HashSet(pieces);
        Piece piece = null;
        Set tmpSet_18 = new HashSet(e1_set_11);
        for (Iterator enm_17 = tmpSet_18.iterator(); enm_17.hasNext() && tmpQuant_8; ) {
          Piece elem_16 = (Piece)enm_17.next();
          /* piece */
          piece = elem_16;
          if (!UTIL.equals(piece.getColor(), new quotes.Red())) 
            tmpQuant_8 = false;
        }
      }
      varRes_2 = Boolean.valueOf(tmpQuant_8);
    }
    return varRes_2;
  }
// ***** VDMTOOLS END Name=pre_placePiecesP2#1|List


// ***** VDMTOOLS START Name=placePieces#2|List|Object KEEP=NO
  private void placePieces (final List pieces, final Object playerColor) throws CGException {
    sentinel.entering(((BoardSentinel)sentinel).placePieces);
    try {
      if (!this.pre_placePieces(pieces, playerColor).booleanValue()) 
        UTIL.RunTime("Precondition failure in placePieces");
      {
        Number counter = null;
        List playerPiecesCoords = null;
        counter = new Integer(1);
        if (UTIL.equals(playerColor, new quotes.Blue())) 
          playerPiecesCoords = UTIL.ConvertToList(UTIL.clone(pieceCoordsP1));
        else 
          playerPiecesCoords = UTIL.ConvertToList(UTIL.clone(pieceCoordsP2));
        {
          Set iset_13 = new HashSet(playerPiecesCoords);
          Set tmpSet_27 = new HashSet(iset_13);
          for (Iterator enm_26 = tmpSet_27.iterator(); enm_26.hasNext(); ) {
            Coord elem_9 = (Coord)enm_26.next();
            Coord coord = null;
            /* coord */
            coord = elem_9;
            if ((1 > counter.intValue()) || (counter.intValue() > pieces.size())) 
              UTIL.RunTime("Illegal index");
            List level_17 = null;
            if ((1 > coord.getY().intValue()) || (coord.getY().intValue() > board.size())) 
              UTIL.RunTime("Illegal index");
            level_17 = UTIL.ConvertToList(board.get(coord.getY().intValue() - 1));
            level_17.set(((Number)coord.getX()).intValue() - 1, ((Piece)pieces.get(counter.intValue() - 1)));
            board.set(((Number)coord.getY()).intValue() - 1, level_17);
            counter = new Integer(counter.intValue() + 1);
          }
        }
      }
    }
    finally {
      sentinel.leaving(((BoardSentinel)sentinel).placePieces);
    }
  }
// ***** VDMTOOLS END Name=placePieces#2|List|Object


// ***** VDMTOOLS START Name=pre_placePieces#2|List|Object KEEP=NO
  private Boolean pre_placePieces (final List pieces, final Object playerColor) throws CGException {
    Boolean varRes_3 = null;
    Boolean var1_4 = null;
    Set var2_7 = new HashSet();
    var2_7.add(new quotes.Blue());
    var2_7.add(new quotes.Red());
    if ((var1_4 = Boolean.valueOf(UTIL.Contains(var2_7, playerColor))).booleanValue()) 
      var1_4 = Boolean.valueOf(pieces.size() == 40);
    if ((varRes_3 = var1_4).booleanValue()) {
      boolean tmpQuant_15 = true;
      {
        Set e1_set_18 = new HashSet(pieces);
        Piece piece = null;
        Set tmpSet_25 = new HashSet(e1_set_18);
        for (Iterator enm_24 = tmpSet_25.iterator(); enm_24.hasNext() && tmpQuant_15; ) {
          Piece elem_23 = (Piece)enm_24.next();
          /* piece */
          piece = elem_23;
          if (!UTIL.equals(piece.getColor(), playerColor)) 
            tmpQuant_15 = false;
        }
      }
      varRes_3 = Boolean.valueOf(tmpQuant_15);
    }
    return varRes_3;
  }
// ***** VDMTOOLS END Name=pre_placePieces#2|List|Object


// ***** VDMTOOLS START Name=getNumberPiecesOnBoard KEEP=NO
  public Number getNumberPiecesOnBoard () throws CGException {
    sentinel.entering(((BoardSentinel)sentinel).getNumberPiecesOnBoard);
    try {
      Number counter = null;
      counter = new Integer(0);
      {
        Set iset_6 = new HashSet(board);
        Set tmpSet_21 = new HashSet(iset_6);
        for (Iterator enm_20 = tmpSet_21.iterator(); enm_20.hasNext(); ) {
          List elem_2 = UTIL.ConvertToList(enm_20.next());
          List row = null;
          /* row */
          row = elem_2;
          {
            Set iset_11 = new HashSet(row);
            Set tmpSet_19 = new HashSet(iset_11);
            for (Iterator enm_18 = tmpSet_19.iterator(); enm_18.hasNext(); ) {
              Piece elem_7 = (Piece)enm_18.next();
              Piece pos = null;
              /* pos */
              pos = (Piece)elem_7;
              if (!UTIL.equals(pos, null)) 
                counter = new Integer(counter.intValue() + 1);
            }
          }
        }
      }
      return counter;
    }
    finally {
      sentinel.leaving(((BoardSentinel)sentinel).getNumberPiecesOnBoard);
    }
  }
// ***** VDMTOOLS END Name=getNumberPiecesOnBoard


// ***** VDMTOOLS START Name=movePiece#2|Coord|Coord KEEP=NO
  public void movePiece (final Coord pos1, final Coord pos2) throws CGException {
    sentinel.entering(((BoardSentinel)sentinel).movePiece);
    try {
      if (!this.pre_movePiece(pos1, pos2).booleanValue()) 
        UTIL.RunTime("Precondition failure in movePiece");
      {
        Piece piece = null;
        Object rhs_5 = (Piece)getPieceAtPosition(pos1);
        if (!(rhs_5 instanceof Piece)) 
          UTIL.RunTime("Incompatible type");
        piece = (Piece)UTIL.clone(rhs_5);
        removePiece(pos1);
        List level_9 = null;
        if ((1 > pos2.getY().intValue()) || (pos2.getY().intValue() > board.size())) 
          UTIL.RunTime("Illegal index");
        level_9 = UTIL.ConvertToList(board.get(pos2.getY().intValue() - 1));
        level_9.set(((Number)pos2.getX()).intValue() - 1, piece);
        board.set(((Number)pos2.getY()).intValue() - 1, level_9);
      }
    }
    finally {
      sentinel.leaving(((BoardSentinel)sentinel).movePiece);
    }
  }
// ***** VDMTOOLS END Name=movePiece#2|Coord|Coord


// ***** VDMTOOLS START Name=pre_movePiece#2|Coord|Coord KEEP=NO
  public Boolean pre_movePiece (final Coord pos1, final Coord pos2) throws CGException {
    Boolean varRes_3 = null;
    Boolean var1_4 = null;
    if ((var1_4 = Boolean.valueOf(!Coord.areEqual(pos1, pos2).booleanValue())).booleanValue()) 
      var1_4 = Boolean.valueOf(!UTIL.equals((Piece)getPieceAtPosition(pos1), null));
    if ((varRes_3 = var1_4).booleanValue()) 
      varRes_3 = isPositionFree(pos2);
    return varRes_3;
  }
// ***** VDMTOOLS END Name=pre_movePiece#2|Coord|Coord


// ***** VDMTOOLS START Name=removePiece#1|Coord KEEP=NO
  public void removePiece (final Coord pos) throws CGException {
    sentinel.entering(((BoardSentinel)sentinel).removePiece);
    try {
      if (!this.pre_removePiece(pos).booleanValue()) 
        UTIL.RunTime("Precondition failure in removePiece");
      {
        Piece piece = null;
        if ((1 > pos.getY().intValue()) || (pos.getY().intValue() > board.size())) 
          UTIL.RunTime("Illegal index");
        List argTmp_5 = new ArrayList(UTIL.ConvertToList(board.get(pos.getY().intValue() - 1)));
        if ((1 > pos.getX().intValue()) || (pos.getX().intValue() > argTmp_5.size())) 
          UTIL.RunTime("Illegal index");
        piece = (Piece)argTmp_5.get(pos.getX().intValue() - 1);
        List level_8 = null;
        if ((1 > pos.getY().intValue()) || (pos.getY().intValue() > board.size())) 
          UTIL.RunTime("Illegal index");
        level_8 = UTIL.ConvertToList(board.get(pos.getY().intValue() - 1));
        level_8.set(((Number)pos.getX()).intValue() - 1, null);
        board.set(((Number)pos.getY()).intValue() - 1, level_8);
      }
    }
    finally {
      sentinel.leaving(((BoardSentinel)sentinel).removePiece);
    }
  }
// ***** VDMTOOLS END Name=removePiece#1|Coord


// ***** VDMTOOLS START Name=pre_removePiece#1|Coord KEEP=NO
  public Boolean pre_removePiece (final Coord pos) throws CGException {
    Boolean varRes_2 = null;
    Boolean var1_3 = null;
    Set var2_6 = new HashSet();
    var2_6 = new HashSet();
    int ubi_11 = BOARDSIZE.intValue();
    for (int count_9 = 1; count_9 <= ubi_11; count_9++) 
      var2_6.add(new Integer(count_9));
    if ((var1_3 = Boolean.valueOf(UTIL.Contains(var2_6, pos.getX()))).booleanValue()) {
      Set var2_14 = new HashSet();
      var2_14 = new HashSet();
      int ubi_19 = BOARDSIZE.intValue();
      for (int count_17 = 1; count_17 <= ubi_19; count_17++) 
        var2_14.add(new Integer(count_17));
      var1_3 = Boolean.valueOf(UTIL.Contains(var2_14, pos.getY()));
    }
    if ((varRes_2 = var1_3).booleanValue()) 
      varRes_2 = Boolean.valueOf(!UTIL.equals((Piece)getPieceAtPosition(pos), null));
    return varRes_2;
  }
// ***** VDMTOOLS END Name=pre_removePiece#1|Coord


// ***** VDMTOOLS START Name=placePiece#3|Coord|Piece|Player KEEP=NO
  public Number placePiece (final Coord destPos, final Piece piece, final Player player) throws CGException {
    sentinel.entering(((BoardSentinel)sentinel).placePiece);
    try {
      if (!this.pre_placePiece(destPos, piece, player).booleanValue()) 
        UTIL.RunTime("Precondition failure in placePiece");
      Boolean cond_4 = null;
      if ((cond_4 = isPositionFree(destPos)).booleanValue()) {
        Boolean var2_7 = null;
        Boolean var1_8 = null;
        if ((var1_8 = Boolean.valueOf(UTIL.equals(player.getName(), new String("P1")))).booleanValue()) {
          Set var2_14 = new HashSet();
          var2_14 = new HashSet();
          int lbi_18 = P1_INITIAL_Y.intValue();
          int ubi_19 = P1_FINAL_Y.intValue();
          for (int count_17 = lbi_18; count_17 <= ubi_19; count_17++) 
            var2_14.add(new Integer(count_17));
          var1_8 = Boolean.valueOf(UTIL.Contains(var2_14, destPos.getY()));
        }
        if (!(var2_7 = var1_8).booleanValue()) {
          Boolean var2_20 = null;
          if ((var2_20 = Boolean.valueOf(UTIL.equals(player.getName(), new String("P2")))).booleanValue()) {
            Set var2_26 = new HashSet();
            var2_26 = new HashSet();
            int lbi_30 = P2_INITIAL_Y.intValue();
            int ubi_31 = P2_FINAL_Y.intValue();
            for (int count_29 = lbi_30; count_29 <= ubi_31; count_29++) 
              var2_26.add(new Integer(count_29));
            var2_20 = Boolean.valueOf(UTIL.Contains(var2_26, destPos.getY()));
          }
          var2_7 = var2_20;
        }
        cond_4 = var2_7;
      }
      if (cond_4.booleanValue()) {
        List level_34 = null;
        if ((1 > destPos.getY().intValue()) || (destPos.getY().intValue() > board.size())) 
          UTIL.RunTime("Illegal index");
        level_34 = UTIL.ConvertToList(board.get(destPos.getY().intValue() - 1));
        level_34.set(((Number)destPos.getX()).intValue() - 1, player.placePiece());
        board.set(((Number)destPos.getY()).intValue() - 1, level_34);
        return new Integer(0);
      }
      else 
        return new Integer(1);
    }
    finally {
      sentinel.leaving(((BoardSentinel)sentinel).placePiece);
    }
  }
// ***** VDMTOOLS END Name=placePiece#3|Coord|Piece|Player


// ***** VDMTOOLS START Name=pre_placePiece#3|Coord|Piece|Player KEEP=NO
  public Boolean pre_placePiece (final Coord destPos, final Piece piece, final Player player) throws CGException {
    Boolean varRes_4 = null;
    if (!(varRes_4 = Boolean.valueOf(UTIL.equals(player.getName(), new String("P1")))).booleanValue()) 
      varRes_4 = Boolean.valueOf(UTIL.equals(player.getName(), new String("P2")));
    return varRes_4;
  }
// ***** VDMTOOLS END Name=pre_placePiece#3|Coord|Piece|Player


// ***** VDMTOOLS START Name=getBoard KEEP=NO
  public List getBoard () throws CGException {
    sentinel.entering(((BoardSentinel)sentinel).getBoard);
    try {
      return board;
    }
    finally {
      sentinel.leaving(((BoardSentinel)sentinel).getBoard);
    }
  }
// ***** VDMTOOLS END Name=getBoard


// ***** VDMTOOLS START Name=initBoard KEEP=NO
  private void initBoard () throws CGException {
    sentinel.entering(((BoardSentinel)sentinel).initBoard);
    try {
      if (!this.pre_initBoard().booleanValue()) 
        UTIL.RunTime("Precondition failure in initBoard");
      {
        List row = null;
        Number i = new Integer(1);
        Number j = new Integer(1);
        while (i.intValue() <= 10) {
          List rhs_5 = new ArrayList();
          if (!(((Object)rhs_5) instanceof List)) 
            UTIL.RunTime("Incompatible type");
          row = UTIL.ConvertToList(UTIL.clone(rhs_5));
          while (j.intValue() <= 10) {
            row.add(null);
            j = new Integer(j.intValue() + 1);
          }
          board.add(row);
          i = new Integer(i.intValue() + 1);
          j = new Integer(1);
        }
      }
    }
    finally {
      sentinel.leaving(((BoardSentinel)sentinel).initBoard);
    }
  }
// ***** VDMTOOLS END Name=initBoard


// ***** VDMTOOLS START Name=pre_initBoard KEEP=NO
  private Boolean pre_initBoard () throws CGException {
    return Boolean.valueOf(UTIL.equals(board, new ArrayList()));
  }
// ***** VDMTOOLS END Name=pre_initBoard


// ***** VDMTOOLS START Name=getLakeCoords KEEP=NO
  public List getLakeCoords () throws CGException {
    sentinel.entering(((BoardSentinel)sentinel).getLakeCoords);
    try {
      return lakes;
    }
    finally {
      sentinel.leaving(((BoardSentinel)sentinel).getLakeCoords);
    }
  }
// ***** VDMTOOLS END Name=getLakeCoords


// ***** VDMTOOLS START Name=initLakes KEEP=NO
  private void initLakes () throws CGException {
    sentinel.entering(((BoardSentinel)sentinel).initLakes);
    try {
      if (!this.pre_initLakes().booleanValue()) 
        UTIL.RunTime("Precondition failure in initLakes");
      List tmpSeq_2 = new ArrayList();
      tmpSeq_2.add(new Coord(new Integer(3), new Integer(5)));
      tmpSeq_2.add(new Coord(new Integer(3), new Integer(6)));
      tmpSeq_2.add(new Coord(new Integer(4), new Integer(5)));
      tmpSeq_2.add(new Coord(new Integer(4), new Integer(6)));
      tmpSeq_2.add(new Coord(new Integer(7), new Integer(5)));
      tmpSeq_2.add(new Coord(new Integer(7), new Integer(6)));
      tmpSeq_2.add(new Coord(new Integer(8), new Integer(5)));
      tmpSeq_2.add(new Coord(new Integer(8), new Integer(6)));
      lakes = UTIL.ConvertToList(UTIL.clone(tmpSeq_2));
    }
    finally {
      sentinel.leaving(((BoardSentinel)sentinel).initLakes);
    }
  }
// ***** VDMTOOLS END Name=initLakes


// ***** VDMTOOLS START Name=pre_initLakes KEEP=NO
  private Boolean pre_initLakes () throws CGException {
    return Boolean.valueOf(UTIL.equals(lakes, new ArrayList()));
  }
// ***** VDMTOOLS END Name=pre_initLakes


// ***** VDMTOOLS START Name=initPieceCoords KEEP=NO
  private void initPieceCoords () throws CGException {
    sentinel.entering(((BoardSentinel)sentinel).initPieceCoords);
    try {
      List tmpSeq_2 = new ArrayList();
      tmpSeq_2.add(new Coord(new Integer(5), new Integer(10)));
      tmpSeq_2.add(new Coord(new Integer(8), new Integer(7)));
      tmpSeq_2.add(new Coord(new Integer(1), new Integer(7)));
      tmpSeq_2.add(new Coord(new Integer(7), new Integer(7)));
      tmpSeq_2.add(new Coord(new Integer(10), new Integer(7)));
      tmpSeq_2.add(new Coord(new Integer(9), new Integer(9)));
      tmpSeq_2.add(new Coord(new Integer(3), new Integer(7)));
      tmpSeq_2.add(new Coord(new Integer(6), new Integer(7)));
      tmpSeq_2.add(new Coord(new Integer(8), new Integer(8)));
      tmpSeq_2.add(new Coord(new Integer(5), new Integer(9)));
      tmpSeq_2.add(new Coord(new Integer(10), new Integer(9)));
      tmpSeq_2.add(new Coord(new Integer(4), new Integer(10)));
      tmpSeq_2.add(new Coord(new Integer(6), new Integer(10)));
      tmpSeq_2.add(new Coord(new Integer(3), new Integer(8)));
      tmpSeq_2.add(new Coord(new Integer(6), new Integer(9)));
      tmpSeq_2.add(new Coord(new Integer(8), new Integer(9)));
      tmpSeq_2.add(new Coord(new Integer(10), new Integer(10)));
      tmpSeq_2.add(new Coord(new Integer(4), new Integer(8)));
      tmpSeq_2.add(new Coord(new Integer(10), new Integer(8)));
      tmpSeq_2.add(new Coord(new Integer(1), new Integer(9)));
      tmpSeq_2.add(new Coord(new Integer(2), new Integer(10)));
      tmpSeq_2.add(new Coord(new Integer(2), new Integer(9)));
      tmpSeq_2.add(new Coord(new Integer(7), new Integer(9)));
      tmpSeq_2.add(new Coord(new Integer(1), new Integer(10)));
      tmpSeq_2.add(new Coord(new Integer(3), new Integer(10)));
      tmpSeq_2.add(new Coord(new Integer(9), new Integer(10)));
      tmpSeq_2.add(new Coord(new Integer(3), new Integer(9)));
      tmpSeq_2.add(new Coord(new Integer(2), new Integer(8)));
      tmpSeq_2.add(new Coord(new Integer(6), new Integer(8)));
      tmpSeq_2.add(new Coord(new Integer(2), new Integer(7)));
      tmpSeq_2.add(new Coord(new Integer(4), new Integer(7)));
      tmpSeq_2.add(new Coord(new Integer(5), new Integer(7)));
      tmpSeq_2.add(new Coord(new Integer(9), new Integer(7)));
      tmpSeq_2.add(new Coord(new Integer(5), new Integer(8)));
      tmpSeq_2.add(new Coord(new Integer(9), new Integer(8)));
      tmpSeq_2.add(new Coord(new Integer(4), new Integer(9)));
      tmpSeq_2.add(new Coord(new Integer(7), new Integer(10)));
      tmpSeq_2.add(new Coord(new Integer(1), new Integer(8)));
      tmpSeq_2.add(new Coord(new Integer(7), new Integer(8)));
      tmpSeq_2.add(new Coord(new Integer(8), new Integer(10)));
      pieceCoordsP1 = UTIL.ConvertToList(UTIL.clone(tmpSeq_2));
      List tmpSeq_124 = new ArrayList();
      tmpSeq_124.add(new Coord(new Integer(6), new Integer(1)));
      tmpSeq_124.add(new Coord(new Integer(3), new Integer(4)));
      tmpSeq_124.add(new Coord(new Integer(10), new Integer(4)));
      tmpSeq_124.add(new Coord(new Integer(4), new Integer(4)));
      tmpSeq_124.add(new Coord(new Integer(1), new Integer(4)));
      tmpSeq_124.add(new Coord(new Integer(2), new Integer(2)));
      tmpSeq_124.add(new Coord(new Integer(8), new Integer(4)));
      tmpSeq_124.add(new Coord(new Integer(5), new Integer(4)));
      tmpSeq_124.add(new Coord(new Integer(3), new Integer(3)));
      tmpSeq_124.add(new Coord(new Integer(6), new Integer(2)));
      tmpSeq_124.add(new Coord(new Integer(1), new Integer(2)));
      tmpSeq_124.add(new Coord(new Integer(7), new Integer(1)));
      tmpSeq_124.add(new Coord(new Integer(5), new Integer(1)));
      tmpSeq_124.add(new Coord(new Integer(8), new Integer(3)));
      tmpSeq_124.add(new Coord(new Integer(5), new Integer(2)));
      tmpSeq_124.add(new Coord(new Integer(3), new Integer(2)));
      tmpSeq_124.add(new Coord(new Integer(1), new Integer(1)));
      tmpSeq_124.add(new Coord(new Integer(7), new Integer(3)));
      tmpSeq_124.add(new Coord(new Integer(1), new Integer(3)));
      tmpSeq_124.add(new Coord(new Integer(10), new Integer(2)));
      tmpSeq_124.add(new Coord(new Integer(9), new Integer(1)));
      tmpSeq_124.add(new Coord(new Integer(9), new Integer(2)));
      tmpSeq_124.add(new Coord(new Integer(4), new Integer(2)));
      tmpSeq_124.add(new Coord(new Integer(10), new Integer(1)));
      tmpSeq_124.add(new Coord(new Integer(8), new Integer(1)));
      tmpSeq_124.add(new Coord(new Integer(2), new Integer(1)));
      tmpSeq_124.add(new Coord(new Integer(8), new Integer(2)));
      tmpSeq_124.add(new Coord(new Integer(9), new Integer(3)));
      tmpSeq_124.add(new Coord(new Integer(5), new Integer(3)));
      tmpSeq_124.add(new Coord(new Integer(9), new Integer(4)));
      tmpSeq_124.add(new Coord(new Integer(7), new Integer(4)));
      tmpSeq_124.add(new Coord(new Integer(6), new Integer(4)));
      tmpSeq_124.add(new Coord(new Integer(2), new Integer(4)));
      tmpSeq_124.add(new Coord(new Integer(6), new Integer(3)));
      tmpSeq_124.add(new Coord(new Integer(2), new Integer(3)));
      tmpSeq_124.add(new Coord(new Integer(7), new Integer(2)));
      tmpSeq_124.add(new Coord(new Integer(4), new Integer(1)));
      tmpSeq_124.add(new Coord(new Integer(10), new Integer(3)));
      tmpSeq_124.add(new Coord(new Integer(4), new Integer(3)));
      tmpSeq_124.add(new Coord(new Integer(3), new Integer(1)));
      pieceCoordsP2 = UTIL.ConvertToList(UTIL.clone(tmpSeq_124));
    }
    finally {
      sentinel.leaving(((BoardSentinel)sentinel).initPieceCoords);
    }
  }
// ***** VDMTOOLS END Name=initPieceCoords


// ***** VDMTOOLS START Name=addPiece#2|Piece|Coord KEEP=NO
  public void addPiece (final Piece piece, final Coord pos) throws CGException {
    sentinel.entering(((BoardSentinel)sentinel).addPiece);
    try {
      if (!this.pre_addPiece(piece, pos).booleanValue()) 
        UTIL.RunTime("Precondition failure in addPiece");
      List level_4 = null;
      if ((1 > pos.getY().intValue()) || (pos.getY().intValue() > board.size())) 
        UTIL.RunTime("Illegal index");
      level_4 = UTIL.ConvertToList(board.get(pos.getY().intValue() - 1));
      level_4.set(((Number)pos.getX()).intValue() - 1, piece);
      board.set(((Number)pos.getY()).intValue() - 1, level_4);
    }
    finally {
      sentinel.leaving(((BoardSentinel)sentinel).addPiece);
    }
  }
// ***** VDMTOOLS END Name=addPiece#2|Piece|Coord


// ***** VDMTOOLS START Name=pre_addPiece#2|Piece|Coord KEEP=NO
  public Boolean pre_addPiece (final Piece piece, final Coord pos) throws CGException {
    Boolean varRes_3 = null;
    if ((varRes_3 = isPositionFree(pos)).booleanValue()) {
      Set var2_8 = new HashSet();
      var2_8.add(new quotes.Blue());
      var2_8.add(new quotes.Red());
      varRes_3 = Boolean.valueOf(UTIL.Contains(var2_8, piece.getColor()));
    }
    return varRes_3;
  }
// ***** VDMTOOLS END Name=pre_addPiece#2|Piece|Coord

}
;
