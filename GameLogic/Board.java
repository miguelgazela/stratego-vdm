package GameLogic;
//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2013-11-28 by the VDM++ to JAVA Code Generator
// (v9.0.2 - Thu 14-Mar-2013 11:53:47 +0900)
//
// Supported compilers: jdk 1.4/1.5/1.6
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// This file was genereted from "/Users/migueloliveira/Dropbox/projects/stratego/Board.vdmpp".

// ***** VDMTOOLS START Name=package KEEP=NO
// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=NO
import java.util.Set;
import java.util.List;
import java.util.HashSet;
import java.util.Iterator;
import java.util.ArrayList;
import jp.vdmtools.VDM.UTIL;
import jp.vdmtools.VDM.Record;
import jp.vdmtools.VDM.Sentinel;
import jp.vdmtools.VDM.EvaluatePP;
import jp.vdmtools.VDM.CGException;
// ***** VDMTOOLS END Name=imports



public class Board implements EvaluatePP {

// ***** VDMTOOLS START Name=board KEEP=NO
  private volatile List board = null;
// ***** VDMTOOLS END Name=board

// ***** VDMTOOLS START Name=lakes KEEP=NO
  private volatile List lakes = null;
// ***** VDMTOOLS END Name=lakes

// ***** VDMTOOLS START Name=sentinel KEEP=NO
  volatile Sentinel sentinel;
// ***** VDMTOOLS END Name=sentinel


// ***** VDMTOOLS START Name=BoardSentinel KEEP=NO
  class BoardSentinel extends Sentinel {

    public final int Board = 0;

    public final int addPiece = 1;

    public final int getBoard = 2;

    public final int initBoard = 3;

    public final int initLakes = 4;

    public final int movePiece = 5;

    public final int placePieces = 6;

    public final int removePiece = 7;

    public final int placePiecesP1 = 8;

    public final int placePiecesP2 = 9;

    public final int isPositionFree = 10;

    public final int isPositionLake = 11;

    public final int getPieceAtPosition = 12;

    public final int getNumberPiecesOnBoard = 13;

    public final int nr_functions = 14;


    public BoardSentinel () throws CGException {}


    public BoardSentinel (EvaluatePP instance) throws CGException {
      init(nr_functions, instance);
    }

  }
// ***** VDMTOOLS END Name=BoardSentinel
;

// ***** VDMTOOLS START Name=evaluatePP#1|int KEEP=NO
  public Boolean evaluatePP (int fnr) throws CGException {
    return Boolean.TRUE;
  }
// ***** VDMTOOLS END Name=evaluatePP#1|int


// ***** VDMTOOLS START Name=setSentinel KEEP=NO
  public void setSentinel () {
    try {
      sentinel = new BoardSentinel(this);
    }
    catch (Exception e) {
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=setSentinel

// ***** VDMTOOLS START Name=BOARDSIZE KEEP=NO
  private static final Number BOARDSIZE = new Integer(10);
// ***** VDMTOOLS END Name=BOARDSIZE

// ***** VDMTOOLS START Name=P1_INITIAL_Y KEEP=NO
  private static final Number P1_INITIAL_Y = new Integer(7);
// ***** VDMTOOLS END Name=P1_INITIAL_Y

// ***** VDMTOOLS START Name=P1_FINAL_Y KEEP=NO
  private static final Number P1_FINAL_Y = new Integer(10);
// ***** VDMTOOLS END Name=P1_FINAL_Y

// ***** VDMTOOLS START Name=P2_INITIAL_Y KEEP=NO
  private static final Number P2_INITIAL_Y = new Integer(1);
// ***** VDMTOOLS END Name=P2_INITIAL_Y

// ***** VDMTOOLS START Name=P2_FINAL_Y KEEP=NO
  private static final Number P2_FINAL_Y = new Integer(4);
// ***** VDMTOOLS END Name=P2_FINAL_Y


// ***** VDMTOOLS START Name=vdm_init_Board KEEP=NO
  private void vdm_init_Board () {
    try {
      setSentinel();
      board = new ArrayList();
      lakes = new ArrayList();
    }
    catch (Exception e) {
      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=vdm_init_Board


// ***** VDMTOOLS START Name=Board KEEP=NO
  public Board () throws CGException {
    try {
      vdm_init_Board();
      initBoard();
      initLakes();
      setSentinel();
    }
    catch (Throwable e) {
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=Board


// ***** VDMTOOLS START Name=getPieceAtPosition#1|Coord KEEP=NO
  public Piece getPieceAtPosition (final Coord pos) throws CGException {
    sentinel.entering(((BoardSentinel)sentinel).getPieceAtPosition);
    try {
      if (!this.pre_getPieceAtPosition(pos).booleanValue()) 
        UTIL.RunTime("Precondition failure in getPieceAtPosition");
      if ((1 > pos.getY().intValue()) || (pos.getY().intValue() > board.size())) 
        UTIL.RunTime("Illegal index");
      List argTmp_6 = new ArrayList(UTIL.ConvertToList(board.get(pos.getY().intValue() - 1)));
      if ((1 > pos.getX().intValue()) || (pos.getX().intValue() > argTmp_6.size())) 
        UTIL.RunTime("Illegal index");
      return ((Piece)argTmp_6.get(pos.getX().intValue() - 1));
    }
    finally {
      sentinel.leaving(((BoardSentinel)sentinel).getPieceAtPosition);
    }
  }
// ***** VDMTOOLS END Name=getPieceAtPosition#1|Coord


// ***** VDMTOOLS START Name=pre_getPieceAtPosition#1|Coord KEEP=NO
  public Boolean pre_getPieceAtPosition (final Coord pos) throws CGException {
    Boolean varRes_2 = null;
    Set var2_5 = new HashSet();
    var2_5 = new HashSet();
    int ubi_10 = BOARDSIZE.intValue();
    for (int count_8 = 1; count_8 <= ubi_10; count_8++) 
      var2_5.add(new Integer(count_8));
    if ((varRes_2 = Boolean.valueOf(UTIL.Contains(var2_5, pos.getX()))).booleanValue()) {
      Set var2_13 = new HashSet();
      var2_13 = new HashSet();
      int ubi_18 = BOARDSIZE.intValue();
      for (int count_16 = 1; count_16 <= ubi_18; count_16++) 
        var2_13.add(new Integer(count_16));
      varRes_2 = Boolean.valueOf(UTIL.Contains(var2_13, pos.getY()));
    }
    return varRes_2;
  }
// ***** VDMTOOLS END Name=pre_getPieceAtPosition#1|Coord


// ***** VDMTOOLS START Name=isPositionFree#1|Coord KEEP=NO
  public Boolean isPositionFree (final Coord pos) throws CGException {
    sentinel.entering(((BoardSentinel)sentinel).isPositionFree);
    try {
      if (!this.pre_isPositionFree(pos).booleanValue()) 
        UTIL.RunTime("Precondition failure in isPositionFree");
      Boolean rexpr_2 = null;
      if ((1 > pos.getY().intValue()) || (pos.getY().intValue() > board.size())) 
        UTIL.RunTime("Illegal index");
      List argTmp_8 = new ArrayList(UTIL.ConvertToList(board.get(pos.getY().intValue() - 1)));
      if ((1 > pos.getX().intValue()) || (pos.getX().intValue() > argTmp_8.size())) 
        UTIL.RunTime("Illegal index");
      if ((rexpr_2 = Boolean.valueOf(UTIL.equals(((Piece)argTmp_8.get(pos.getX().intValue() - 1)), null))).booleanValue()) 
        rexpr_2 = Boolean.valueOf(!isPositionLake(pos).booleanValue());
      return rexpr_2;
    }
    finally {
      sentinel.leaving(((BoardSentinel)sentinel).isPositionFree);
    }
  }
// ***** VDMTOOLS END Name=isPositionFree#1|Coord


// ***** VDMTOOLS START Name=pre_isPositionFree#1|Coord KEEP=NO
  public Boolean pre_isPositionFree (final Coord pos) throws CGException {
    Boolean varRes_2 = null;
    Set var2_5 = new HashSet();
    var2_5 = new HashSet();
    int ubi_10 = BOARDSIZE.intValue();
    for (int count_8 = 1; count_8 <= ubi_10; count_8++) 
      var2_5.add(new Integer(count_8));
    if ((varRes_2 = Boolean.valueOf(UTIL.Contains(var2_5, pos.getX()))).booleanValue()) {
      Set var2_13 = new HashSet();
      var2_13 = new HashSet();
      int ubi_18 = BOARDSIZE.intValue();
      for (int count_16 = 1; count_16 <= ubi_18; count_16++) 
        var2_13.add(new Integer(count_16));
      varRes_2 = Boolean.valueOf(UTIL.Contains(var2_13, pos.getY()));
    }
    return varRes_2;
  }
// ***** VDMTOOLS END Name=pre_isPositionFree#1|Coord


// ***** VDMTOOLS START Name=isPositionLake#1|Coord KEEP=NO
  public Boolean isPositionLake (final Coord pos) throws CGException {
    sentinel.entering(((BoardSentinel)sentinel).isPositionLake);
    try {
      if (!this.pre_isPositionLake(pos).booleanValue()) 
        UTIL.RunTime("Precondition failure in isPositionLake");
      boolean tmpQuant_3 = false;
      {
        Set e1_set_6 = new HashSet(lakes);
        Coord coord = null;
        Set tmpSet_13 = new HashSet(e1_set_6);
        for (Iterator enm_12 = tmpSet_13.iterator(); enm_12.hasNext() && !tmpQuant_3; ) {
          Coord elem_11 = (Coord)enm_12.next();
          /* coord */
          coord = elem_11;
          if (Coord.areEqual(pos, coord).booleanValue()) 
            tmpQuant_3 = true;
        }
      }
      return Boolean.valueOf(tmpQuant_3);
    }
    finally {
      sentinel.leaving(((BoardSentinel)sentinel).isPositionLake);
    }
  }
// ***** VDMTOOLS END Name=isPositionLake#1|Coord


// ***** VDMTOOLS START Name=pre_isPositionLake#1|Coord KEEP=NO
  public Boolean pre_isPositionLake (final Coord pos) throws CGException {
    Boolean varRes_2 = null;
    Set var2_5 = new HashSet();
    var2_5 = new HashSet();
    int ubi_10 = BOARDSIZE.intValue();
    for (int count_8 = 1; count_8 <= ubi_10; count_8++) 
      var2_5.add(new Integer(count_8));
    if ((varRes_2 = Boolean.valueOf(UTIL.Contains(var2_5, pos.getX()))).booleanValue()) {
      Set var2_13 = new HashSet();
      var2_13 = new HashSet();
      int ubi_18 = BOARDSIZE.intValue();
      for (int count_16 = 1; count_16 <= ubi_18; count_16++) 
        var2_13.add(new Integer(count_16));
      varRes_2 = Boolean.valueOf(UTIL.Contains(var2_13, pos.getY()));
    }
    return varRes_2;
  }
// ***** VDMTOOLS END Name=pre_isPositionLake#1|Coord


// ***** VDMTOOLS START Name=placePiecesP1#1|List KEEP=NO
  public void placePiecesP1 (final List pieces) throws CGException {
    sentinel.entering(((BoardSentinel)sentinel).placePiecesP1);
    try {
      if (!this.pre_placePiecesP1(pieces).booleanValue()) 
        UTIL.RunTime("Precondition failure in placePiecesP1");
      placePieces(pieces, P1_INITIAL_Y, P1_FINAL_Y);
    }
    finally {
      sentinel.leaving(((BoardSentinel)sentinel).placePiecesP1);
    }
  }
// ***** VDMTOOLS END Name=placePiecesP1#1|List


// ***** VDMTOOLS START Name=pre_placePiecesP1#1|List KEEP=NO
  public Boolean pre_placePiecesP1 (final List pieces) throws CGException {
    Boolean varRes_2 = null;
    if ((varRes_2 = Boolean.valueOf(pieces.size() == 40)).booleanValue()) {
      boolean tmpQuant_9 = false;
      {
        Set e1_set_12 = new HashSet(pieces);
        Piece piece1 = null;
        Piece piece2 = null;
        Set e_set_54 = e1_set_12;
        Set tmpSet_57 = new HashSet(e_set_54);
        for (Iterator enm_56 = tmpSet_57.iterator(); enm_56.hasNext() && !tmpQuant_9; ) {
          Piece elem_55 = (Piece)enm_56.next();
          /* piece2 */
          piece2 = elem_55;
          Set tmpSet_53 = new HashSet(e1_set_12);
          for (Iterator enm_52 = tmpSet_53.iterator(); enm_52.hasNext() && !tmpQuant_9; ) {
            Piece elem_51 = (Piece)enm_52.next();
            /* piece1 */
            piece1 = elem_51;
            Boolean pred_13 = null;
            Boolean var1_14 = null;
            if ((var1_14 = Boolean.valueOf(!UTIL.equals(piece1, piece2))).booleanValue()) 
              var1_14 = Boolean.valueOf(!UTIL.equals(piece1.getColor(), piece2.getColor()));
            if ((pred_13 = var1_14).booleanValue()) {
              boolean tmpQuant_23 = false;
              {
                Set e1_set_26 = new HashSet(pieces);
                Piece piece = null;
                Set tmpSet_49 = new HashSet(e1_set_26);
                for (Iterator enm_48 = tmpSet_49.iterator(); enm_48.hasNext() && !tmpQuant_23; ) {
                  Piece elem_47 = (Piece)enm_48.next();
                  /* piece */
                  piece = elem_47;
                  Boolean pred_27 = null;
                  if ((1 > P2_INITIAL_Y.intValue()) || (P2_INITIAL_Y.intValue() > board.size())) 
                    UTIL.RunTime("Illegal index");
                  List argTmp_33 = new ArrayList(UTIL.ConvertToList(board.get(P2_INITIAL_Y.intValue() - 1)));
                  if ((1 > 1) || (1 > argTmp_33.size())) 
                    UTIL.RunTime("Illegal index");
                  if ((pred_27 = Boolean.valueOf(!UTIL.equals(((Piece)argTmp_33.get(0)), null))).booleanValue()) {
                    if ((1 > P2_INITIAL_Y.intValue()) || (P2_INITIAL_Y.intValue() > board.size())) 
                      UTIL.RunTime("Illegal index");
                    List argTmp_43 = new ArrayList(UTIL.ConvertToList(board.get(P2_INITIAL_Y.intValue() - 1)));
                    if ((1 > 1) || (1 > argTmp_43.size())) 
                      UTIL.RunTime("Illegal index");
                    Piece obj_45 = ((Piece)argTmp_43.get(0));
                    pred_27 = Boolean.valueOf(UTIL.equals(piece.getColor(), obj_45.getColor()));
                  }
                  if (pred_27.booleanValue()) 
                    tmpQuant_23 = true;
                }
              }
              pred_13 = Boolean.valueOf(!tmpQuant_23);
            }
            if (pred_13.booleanValue()) 
              tmpQuant_9 = true;
          }
        }
      }
      varRes_2 = Boolean.valueOf(!tmpQuant_9);
    }
    return varRes_2;
  }
// ***** VDMTOOLS END Name=pre_placePiecesP1#1|List


// ***** VDMTOOLS START Name=placePiecesP2#1|List KEEP=NO
  public void placePiecesP2 (final List pieces) throws CGException {
    sentinel.entering(((BoardSentinel)sentinel).placePiecesP2);
    try {
      if (!this.pre_placePiecesP2(pieces).booleanValue()) 
        UTIL.RunTime("Precondition failure in placePiecesP2");
      placePieces(pieces, P2_INITIAL_Y, P2_FINAL_Y);
    }
    finally {
      sentinel.leaving(((BoardSentinel)sentinel).placePiecesP2);
    }
  }
// ***** VDMTOOLS END Name=placePiecesP2#1|List


// ***** VDMTOOLS START Name=pre_placePiecesP2#1|List KEEP=NO
  public Boolean pre_placePiecesP2 (final List pieces) throws CGException {
    Boolean varRes_2 = null;
    if ((varRes_2 = Boolean.valueOf(pieces.size() == 40)).booleanValue()) {
      boolean tmpQuant_9 = false;
      {
        Set e1_set_12 = new HashSet(pieces);
        Piece piece1 = null;
        Piece piece2 = null;
        Set e_set_54 = e1_set_12;
        Set tmpSet_57 = new HashSet(e_set_54);
        for (Iterator enm_56 = tmpSet_57.iterator(); enm_56.hasNext() && !tmpQuant_9; ) {
          Piece elem_55 = (Piece)enm_56.next();
          /* piece2 */
          piece2 = elem_55;
          Set tmpSet_53 = new HashSet(e1_set_12);
          for (Iterator enm_52 = tmpSet_53.iterator(); enm_52.hasNext() && !tmpQuant_9; ) {
            Piece elem_51 = (Piece)enm_52.next();
            /* piece1 */
            piece1 = elem_51;
            Boolean pred_13 = null;
            Boolean var1_14 = null;
            if ((var1_14 = Boolean.valueOf(!UTIL.equals(piece1, piece2))).booleanValue()) 
              var1_14 = Boolean.valueOf(!UTIL.equals(piece1.getColor(), piece2.getColor()));
            if ((pred_13 = var1_14).booleanValue()) {
              boolean tmpQuant_23 = false;
              {
                Set e1_set_26 = new HashSet(pieces);
                Piece piece = null;
                Set tmpSet_49 = new HashSet(e1_set_26);
                for (Iterator enm_48 = tmpSet_49.iterator(); enm_48.hasNext() && !tmpQuant_23; ) {
                  Piece elem_47 = (Piece)enm_48.next();
                  /* piece */
                  piece = elem_47;
                  Boolean pred_27 = null;
                  if ((1 > P2_INITIAL_Y.intValue()) || (P2_INITIAL_Y.intValue() > board.size())) 
                    UTIL.RunTime("Illegal index");
                  List argTmp_33 = new ArrayList(UTIL.ConvertToList(board.get(P2_INITIAL_Y.intValue() - 1)));
                  if ((1 > 1) || (1 > argTmp_33.size())) 
                    UTIL.RunTime("Illegal index");
                  if ((pred_27 = Boolean.valueOf(!UTIL.equals(((Piece)argTmp_33.get(0)), null))).booleanValue()) {
                    if ((1 > P1_INITIAL_Y.intValue()) || (P1_INITIAL_Y.intValue() > board.size())) 
                      UTIL.RunTime("Illegal index");
                    List argTmp_43 = new ArrayList(UTIL.ConvertToList(board.get(P1_INITIAL_Y.intValue() - 1)));
                    if ((1 > 1) || (1 > argTmp_43.size())) 
                      UTIL.RunTime("Illegal index");
                    Piece obj_45 = ((Piece)argTmp_43.get(0));
                    pred_27 = Boolean.valueOf(UTIL.equals(piece.getColor(), obj_45.getColor()));
                  }
                  if (pred_27.booleanValue()) 
                    tmpQuant_23 = true;
                }
              }
              pred_13 = Boolean.valueOf(!tmpQuant_23);
            }
            if (pred_13.booleanValue()) 
              tmpQuant_9 = true;
          }
        }
      }
      varRes_2 = Boolean.valueOf(!tmpQuant_9);
    }
    return varRes_2;
  }
// ***** VDMTOOLS END Name=pre_placePiecesP2#1|List


// ***** VDMTOOLS START Name=placePieces#3|List|Number|Number KEEP=NO
  private void placePieces (final List pieces, final Number initialY, final Number finalY) throws CGException {
    sentinel.entering(((BoardSentinel)sentinel).placePieces);
    try {
      if (!this.pre_placePieces(pieces, initialY, finalY).booleanValue()) 
        UTIL.RunTime("Precondition failure in placePieces");
      {
        Number counter = null;
        counter = new Integer(1);
        {
          Set iset_7 = new HashSet();
          iset_7 = new HashSet();
          int lbi_11 = initialY.intValue();
          int ubi_12 = finalY.intValue();
          for (int count_10 = lbi_11; count_10 <= ubi_12; count_10++) 
            iset_7.add(new Integer(count_10));
          Set iset_13 = iset_7;
          Set tmpSet_38 = new HashSet(iset_13);
          for (Iterator enm_37 = tmpSet_38.iterator(); enm_37.hasNext(); ) {
            Number elem_5 = UTIL.NumberToInt(enm_37.next());
            Number i = null;
            /* i */
            i = elem_5;
            {
              Set iset_16 = new HashSet();
              iset_16 = new HashSet();
              for (int count_19 = 1; count_19 <= 10; count_19++) 
                iset_16.add(new Integer(count_19));
              Set iset_22 = iset_16;
              Set tmpSet_36 = new HashSet(iset_22);
              for (Iterator enm_35 = tmpSet_36.iterator(); enm_35.hasNext(); ) {
                Number elem_14 = UTIL.NumberToInt(enm_35.next());
                Number j = null;
                /* j */
                j = elem_14;
                if ((1 > counter.intValue()) || (counter.intValue() > pieces.size())) 
                  UTIL.RunTime("Illegal index");
                List level_26 = null;
                if ((1 > i.intValue()) || (i.intValue() > board.size())) 
                  UTIL.RunTime("Illegal index");
                level_26 = UTIL.ConvertToList(board.get(i.intValue() - 1));
                level_26.set(((Number)j).intValue() - 1, ((Piece)pieces.get(counter.intValue() - 1)));
                board.set(((Number)i).intValue() - 1, level_26);
                counter = new Integer(counter.intValue() + 1);
              }
            }
          }
        }
      }
    }
    finally {
      sentinel.leaving(((BoardSentinel)sentinel).placePieces);
    }
  }
// ***** VDMTOOLS END Name=placePieces#3|List|Number|Number


// ***** VDMTOOLS START Name=pre_placePieces#3|List|Number|Number KEEP=NO
  private Boolean pre_placePieces (final List pieces, final Number initialY, final Number finalY) throws CGException {
    Boolean varRes_4 = null;
    Boolean var1_5 = null;
    Boolean var1_6 = null;
    if ((var1_6 = Boolean.valueOf(pieces.size() == 40)).booleanValue()) {
      Set var2_13 = new HashSet();
      var2_13.add(new Integer(1));
      var2_13.add(new Integer(7));
      var1_6 = Boolean.valueOf(UTIL.Contains(var2_13, initialY));
    }
    if ((var1_5 = var1_6).booleanValue()) {
      Set var2_18 = new HashSet();
      var2_18.add(new Integer(4));
      var2_18.add(new Integer(10));
      var1_5 = Boolean.valueOf(UTIL.Contains(var2_18, finalY));
    }
    if ((varRes_4 = var1_5).booleanValue()) {
      boolean tmpQuant_23 = false;
      {
        Set e1_set_26 = new HashSet(pieces);
        Piece piece1 = null;
        Piece piece2 = null;
        Set e_set_38 = e1_set_26;
        Set tmpSet_41 = new HashSet(e_set_38);
        for (Iterator enm_40 = tmpSet_41.iterator(); enm_40.hasNext() && !tmpQuant_23; ) {
          Piece elem_39 = (Piece)enm_40.next();
          /* piece2 */
          piece2 = elem_39;
          Set tmpSet_37 = new HashSet(e1_set_26);
          for (Iterator enm_36 = tmpSet_37.iterator(); enm_36.hasNext() && !tmpQuant_23; ) {
            Piece elem_35 = (Piece)enm_36.next();
            /* piece1 */
            piece1 = elem_35;
            Boolean pred_27 = null;
            if ((pred_27 = Boolean.valueOf(!UTIL.equals(piece1, piece2))).booleanValue()) 
              pred_27 = Boolean.valueOf(!UTIL.equals(piece1.getColor(), piece2.getColor()));
            if (pred_27.booleanValue()) 
              tmpQuant_23 = true;
          }
        }
      }
      varRes_4 = Boolean.valueOf(!tmpQuant_23);
    }
    return varRes_4;
  }
// ***** VDMTOOLS END Name=pre_placePieces#3|List|Number|Number


// ***** VDMTOOLS START Name=getNumberPiecesOnBoard KEEP=NO
  public Number getNumberPiecesOnBoard () throws CGException {
    sentinel.entering(((BoardSentinel)sentinel).getNumberPiecesOnBoard);
    try {
      Number counter = null;
      counter = new Integer(0);
      {
        Set iset_6 = new HashSet(board);
        Set tmpSet_21 = new HashSet(iset_6);
        for (Iterator enm_20 = tmpSet_21.iterator(); enm_20.hasNext(); ) {
          List elem_2 = UTIL.ConvertToList(enm_20.next());
          List row = null;
          /* row */
          row = elem_2;
          {
            Set iset_11 = new HashSet(row);
            Set tmpSet_19 = new HashSet(iset_11);
            for (Iterator enm_18 = tmpSet_19.iterator(); enm_18.hasNext(); ) {
              Piece elem_7 = (Piece)enm_18.next();
              Piece pos = null;
              /* pos */
              pos = (Piece)elem_7;
              if (!UTIL.equals(pos, null)) 
                counter = new Integer(counter.intValue() + 1);
            }
          }
        }
      }
      return counter;
    }
    finally {
      sentinel.leaving(((BoardSentinel)sentinel).getNumberPiecesOnBoard);
    }
  }
// ***** VDMTOOLS END Name=getNumberPiecesOnBoard


// ***** VDMTOOLS START Name=movePiece#2|Coord|Coord KEEP=NO
  public void movePiece (final Coord pos1, final Coord pos2) throws CGException {
    sentinel.entering(((BoardSentinel)sentinel).movePiece);
    try {
      if (!this.pre_movePiece(pos1, pos2).booleanValue()) 
        UTIL.RunTime("Precondition failure in movePiece");
      {
        Piece piece = null;
        Object rhs_5 = (Piece)getPieceAtPosition(pos1);
        if (!(rhs_5 instanceof Piece)) 
          UTIL.RunTime("Incompatible type");
        piece = (Piece)UTIL.clone(rhs_5);
        removePiece(pos1);
        List level_9 = null;
        if ((1 > pos2.getY().intValue()) || (pos2.getY().intValue() > board.size())) 
          UTIL.RunTime("Illegal index");
        level_9 = UTIL.ConvertToList(board.get(pos2.getY().intValue() - 1));
        level_9.set(((Number)pos2.getX()).intValue() - 1, piece);
        board.set(((Number)pos2.getY()).intValue() - 1, level_9);
      }
    }
    finally {
      sentinel.leaving(((BoardSentinel)sentinel).movePiece);
    }
  }
// ***** VDMTOOLS END Name=movePiece#2|Coord|Coord


// ***** VDMTOOLS START Name=pre_movePiece#2|Coord|Coord KEEP=NO
  public Boolean pre_movePiece (final Coord pos1, final Coord pos2) throws CGException {
    Boolean varRes_3 = null;
    Boolean var1_4 = null;
    Boolean var1_5 = null;
    Boolean var1_6 = null;
    Boolean var1_7 = null;
    Boolean var1_8 = null;
    if ((var1_8 = Boolean.valueOf(!Coord.areEqual(pos1, pos2).booleanValue())).booleanValue()) {
      Set var2_15 = new HashSet();
      var2_15 = new HashSet();
      int ubi_20 = BOARDSIZE.intValue();
      for (int count_18 = 1; count_18 <= ubi_20; count_18++) 
        var2_15.add(new Integer(count_18));
      var1_8 = Boolean.valueOf(UTIL.Contains(var2_15, pos1.getX()));
    }
    if ((var1_7 = var1_8).booleanValue()) {
      Set var2_23 = new HashSet();
      var2_23 = new HashSet();
      int ubi_28 = BOARDSIZE.intValue();
      for (int count_26 = 1; count_26 <= ubi_28; count_26++) 
        var2_23.add(new Integer(count_26));
      var1_7 = Boolean.valueOf(UTIL.Contains(var2_23, pos1.getY()));
    }
    if ((var1_6 = var1_7).booleanValue()) {
      Set var2_31 = new HashSet();
      var2_31 = new HashSet();
      int ubi_36 = BOARDSIZE.intValue();
      for (int count_34 = 1; count_34 <= ubi_36; count_34++) 
        var2_31.add(new Integer(count_34));
      var1_6 = Boolean.valueOf(UTIL.Contains(var2_31, pos2.getX()));
    }
    if ((var1_5 = var1_6).booleanValue()) {
      Set var2_39 = new HashSet();
      var2_39 = new HashSet();
      int ubi_44 = BOARDSIZE.intValue();
      for (int count_42 = 1; count_42 <= ubi_44; count_42++) 
        var2_39.add(new Integer(count_42));
      var1_5 = Boolean.valueOf(UTIL.Contains(var2_39, pos2.getY()));
    }
    if ((var1_4 = var1_5).booleanValue()) 
      var1_4 = Boolean.valueOf(!UTIL.equals((Piece)getPieceAtPosition(pos1), null));
    if ((varRes_3 = var1_4).booleanValue()) 
      varRes_3 = isPositionFree(pos2);
    return varRes_3;
  }
// ***** VDMTOOLS END Name=pre_movePiece#2|Coord|Coord


// ***** VDMTOOLS START Name=removePiece#1|Coord KEEP=NO
  public void removePiece (final Coord pos) throws CGException {
    sentinel.entering(((BoardSentinel)sentinel).removePiece);
    try {
      if (!this.pre_removePiece(pos).booleanValue()) 
        UTIL.RunTime("Precondition failure in removePiece");
      {
        Piece piece = null;
        if ((1 > pos.getY().intValue()) || (pos.getY().intValue() > board.size())) 
          UTIL.RunTime("Illegal index");
        List argTmp_6 = new ArrayList(UTIL.ConvertToList(board.get(pos.getY().intValue() - 1)));
        if ((1 > pos.getX().intValue()) || (pos.getX().intValue() > argTmp_6.size())) 
          UTIL.RunTime("Illegal index");
        Object rhs_8 = ((Piece)argTmp_6.get(pos.getX().intValue() - 1));
        if (!(rhs_8 instanceof Piece)) 
          UTIL.RunTime("Incompatible type");
        piece = (Piece)UTIL.clone(rhs_8);
        List level_10 = null;
        if ((1 > pos.getY().intValue()) || (pos.getY().intValue() > board.size())) 
          UTIL.RunTime("Illegal index");
        level_10 = UTIL.ConvertToList(board.get(pos.getY().intValue() - 1));
        level_10.set(((Number)pos.getX()).intValue() - 1, null);
        board.set(((Number)pos.getY()).intValue() - 1, level_10);
      }
    }
    finally {
      sentinel.leaving(((BoardSentinel)sentinel).removePiece);
    }
  }
// ***** VDMTOOLS END Name=removePiece#1|Coord


// ***** VDMTOOLS START Name=pre_removePiece#1|Coord KEEP=NO
  public Boolean pre_removePiece (final Coord pos) throws CGException {
    Boolean varRes_2 = null;
    Boolean var1_3 = null;
    Set var2_6 = new HashSet();
    var2_6 = new HashSet();
    int ubi_11 = BOARDSIZE.intValue();
    for (int count_9 = 1; count_9 <= ubi_11; count_9++) 
      var2_6.add(new Integer(count_9));
    if ((var1_3 = Boolean.valueOf(UTIL.Contains(var2_6, pos.getX()))).booleanValue()) {
      Set var2_14 = new HashSet();
      var2_14 = new HashSet();
      int ubi_19 = BOARDSIZE.intValue();
      for (int count_17 = 1; count_17 <= ubi_19; count_17++) 
        var2_14.add(new Integer(count_17));
      var1_3 = Boolean.valueOf(UTIL.Contains(var2_14, pos.getY()));
    }
    if ((varRes_2 = var1_3).booleanValue()) 
      varRes_2 = Boolean.valueOf(!UTIL.equals((Piece)getPieceAtPosition(pos), null));
    return varRes_2;
  }
// ***** VDMTOOLS END Name=pre_removePiece#1|Coord


// ***** VDMTOOLS START Name=getBoard KEEP=NO
  public List getBoard () throws CGException {
    sentinel.entering(((BoardSentinel)sentinel).getBoard);
    try {
      return board;
    }
    finally {
      sentinel.leaving(((BoardSentinel)sentinel).getBoard);
    }
  }
// ***** VDMTOOLS END Name=getBoard


// ***** VDMTOOLS START Name=initBoard KEEP=NO
  public void initBoard () throws CGException {
    sentinel.entering(((BoardSentinel)sentinel).initBoard);
    try {
      if (!this.pre_initBoard().booleanValue()) 
        UTIL.RunTime("Precondition failure in initBoard");
      {
        List row = null;
        {
          Set iset_3 = new HashSet();
          iset_3 = new HashSet();
          for (int count_6 = 1; count_6 <= 10; count_6++) 
            iset_3.add(new Integer(count_6));
          Set iset_9 = iset_3;
          Set tmpSet_26 = new HashSet(iset_9);
          for (Iterator enm_25 = tmpSet_26.iterator(); enm_25.hasNext(); ) {
            Number elem_1 = UTIL.NumberToInt(enm_25.next());
            Number i = null;
            /* i */
            i = elem_1;
            List rhs_11 = new ArrayList();
            if (!(((Object)rhs_11) instanceof List)) 
              UTIL.RunTime("Incompatible type");
            row = UTIL.ConvertToList(UTIL.clone(rhs_11));
            {
              Set iset_14 = new HashSet();
              iset_14 = new HashSet();
              for (int count_17 = 1; count_17 <= 10; count_17++) 
                iset_14.add(new Integer(count_17));
              Set iset_20 = iset_14;
              Set tmpSet_23 = new HashSet(iset_20);
              for (Iterator enm_22 = tmpSet_23.iterator(); enm_22.hasNext(); ) {
                Number elem_12 = UTIL.NumberToInt(enm_22.next());
                Number j = null;
                /* j */
                j = elem_12;
                row.add(null);
              }
            }
            board.add(row);
          }
        }
      }
    }
    finally {
      sentinel.leaving(((BoardSentinel)sentinel).initBoard);
    }
  }
// ***** VDMTOOLS END Name=initBoard


// ***** VDMTOOLS START Name=pre_initBoard KEEP=NO
  public Boolean pre_initBoard () throws CGException {
    return Boolean.valueOf(UTIL.equals(board, new ArrayList()));
  }
// ***** VDMTOOLS END Name=pre_initBoard


// ***** VDMTOOLS START Name=initLakes KEEP=NO
  public void initLakes () throws CGException {
    sentinel.entering(((BoardSentinel)sentinel).initLakes);
    try {
      if (!this.pre_initLakes().booleanValue()) 
        UTIL.RunTime("Precondition failure in initLakes");
      List tmpSeq_2 = new ArrayList();
      tmpSeq_2.add(new Coord(new Integer(3), new Integer(5)));
      tmpSeq_2.add(new Coord(new Integer(3), new Integer(6)));
      tmpSeq_2.add(new Coord(new Integer(4), new Integer(5)));
      tmpSeq_2.add(new Coord(new Integer(4), new Integer(6)));
      tmpSeq_2.add(new Coord(new Integer(7), new Integer(5)));
      tmpSeq_2.add(new Coord(new Integer(7), new Integer(6)));
      tmpSeq_2.add(new Coord(new Integer(8), new Integer(5)));
      tmpSeq_2.add(new Coord(new Integer(8), new Integer(6)));
      lakes = UTIL.ConvertToList(UTIL.clone(tmpSeq_2));
    }
    finally {
      sentinel.leaving(((BoardSentinel)sentinel).initLakes);
    }
  }
// ***** VDMTOOLS END Name=initLakes


// ***** VDMTOOLS START Name=pre_initLakes KEEP=NO
  public Boolean pre_initLakes () throws CGException {
    return Boolean.valueOf(UTIL.equals(lakes, new ArrayList()));
  }
// ***** VDMTOOLS END Name=pre_initLakes


// ***** VDMTOOLS START Name=addPiece#2|Piece|Coord KEEP=NO
  public void addPiece (final Piece piece, final Coord pos) throws CGException {
    sentinel.entering(((BoardSentinel)sentinel).addPiece);
    try {
      if (!this.pre_addPiece(piece, pos).booleanValue()) 
        UTIL.RunTime("Precondition failure in addPiece");
      List level_4 = null;
      if ((1 > pos.getY().intValue()) || (pos.getY().intValue() > board.size())) 
        UTIL.RunTime("Illegal index");
      level_4 = UTIL.ConvertToList(board.get(pos.getY().intValue() - 1));
      level_4.set(((Number)pos.getX()).intValue() - 1, piece);
      board.set(((Number)pos.getY()).intValue() - 1, level_4);
    }
    finally {
      sentinel.leaving(((BoardSentinel)sentinel).addPiece);
    }
  }
// ***** VDMTOOLS END Name=addPiece#2|Piece|Coord


// ***** VDMTOOLS START Name=pre_addPiece#2|Piece|Coord KEEP=NO
  public Boolean pre_addPiece (final Piece piece, final Coord pos) throws CGException {
    Boolean varRes_3 = null;
    Boolean var1_4 = null;
    Set var2_7 = new HashSet();
    var2_7 = new HashSet();
    int ubi_12 = BOARDSIZE.intValue();
    for (int count_10 = 1; count_10 <= ubi_12; count_10++) 
      var2_7.add(new Integer(count_10));
    if ((var1_4 = Boolean.valueOf(UTIL.Contains(var2_7, pos.getX()))).booleanValue()) {
      Set var2_15 = new HashSet();
      var2_15 = new HashSet();
      int ubi_20 = BOARDSIZE.intValue();
      for (int count_18 = 1; count_18 <= ubi_20; count_18++) 
        var2_15.add(new Integer(count_18));
      var1_4 = Boolean.valueOf(UTIL.Contains(var2_15, pos.getY()));
    }
    if ((varRes_3 = var1_4).booleanValue()) 
      varRes_3 = isPositionFree(pos);
    return varRes_3;
  }
// ***** VDMTOOLS END Name=pre_addPiece#2|Piece|Coord

}
;
