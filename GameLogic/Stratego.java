//
package GameLogic;
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2013-11-29 by the VDM++ to JAVA Code Generator
// (v9.0.2 - Thu 14-Mar-2013 11:53:47 +0900)
//
// Supported compilers: jdk 1.4/1.5/1.6
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// This file was genereted from "/Users/migueloliveira/Dropbox/projects/stratego/Stratego.vdmpp".

// ***** VDMTOOLS START Name=package KEEP=NO
// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=NO
import java.util.Set;
import java.util.List;
import java.util.HashSet;
import java.util.Iterator;
import java.util.ArrayList;
import jp.vdmtools.VDM.UTIL;
import jp.vdmtools.VDM.Token;
import jp.vdmtools.VDM.Record;
import jp.vdmtools.VDM.Sentinel;
import jp.vdmtools.VDM.EvaluatePP;
import jp.vdmtools.VDM.CGException;
// ***** VDMTOOLS END Name=imports



public class Stratego implements EvaluatePP {


// ***** VDMTOOLS START Name=PieceConf KEEP=NO
  public static class PieceConf implements Record {

    public String name;

    public Number rank;

    public Number quantity;


    public PieceConf () {}


    public PieceConf (String p1, Number p2, Number p3) {
      name = p1;
      rank = p2;
      quantity = p3;
    }


    public Object clone () {
      return new PieceConf(name, rank, quantity);
    }


    public String toString () {
      return "mk_Stratego`PieceConf(" + UTIL.toString(name) + ", " + UTIL.toString(rank) + ", " + UTIL.toString(quantity) + ")";
    }


    public boolean equals (Object obj) {
      if (!(obj instanceof PieceConf)) 
        return false;
      else {
        PieceConf temp = (PieceConf)obj;
        return UTIL.equals(name, temp.name) && UTIL.equals(rank, temp.rank) && UTIL.equals(quantity, temp.quantity);
      }
    }


    public int hashCode () {
      return (name == null ? 0 : name.hashCode()) + (rank == null ? 0 : rank.hashCode()) + (quantity == null ? 0 : quantity.hashCode());
    }

  }
// ***** VDMTOOLS END Name=PieceConf
;

// ***** VDMTOOLS START Name=defaultPieces KEEP=NO
  private volatile List defaultPieces = null;
// ***** VDMTOOLS END Name=defaultPieces

// ***** VDMTOOLS START Name=playerOne KEEP=NO
  private volatile Player playerOne = null;
// ***** VDMTOOLS END Name=playerOne

// ***** VDMTOOLS START Name=playerTwo KEEP=NO
  private volatile Player playerTwo = null;
// ***** VDMTOOLS END Name=playerTwo

// ***** VDMTOOLS START Name=board KEEP=NO
  private volatile Board board = null;
// ***** VDMTOOLS END Name=board

// ***** VDMTOOLS START Name=currentPlayer KEEP=NO
  private volatile Player currentPlayer = null;
// ***** VDMTOOLS END Name=currentPlayer

// ***** VDMTOOLS START Name=gameIsOver KEEP=NO
  private volatile Boolean gameIsOver = null;
// ***** VDMTOOLS END Name=gameIsOver

// ***** VDMTOOLS START Name=sentinel KEEP=NO
  volatile Sentinel sentinel;
// ***** VDMTOOLS END Name=sentinel


// ***** VDMTOOLS START Name=StrategoSentinel KEEP=NO
  class StrategoSentinel extends Sentinel {

    public final int Stratego = 0;

    public final int gameOver = 1;

    public final int getBoard = 2;

    public final int initGame = 3;

    public final int makeMove = 4;

    public final int givePieces = 5;

    public final int isGameOver = 6;

    public final int makeBattle = 7;

    public final int updateTurn = 8;

    public final int moveIsValid = 9;

    public final int getPlayerOne = 10;

    public final int getPlayerTwo = 11;

    public final int givePiecesP1 = 12;

    public final int givePiecesP2 = 13;

    public final int makeBattleAux = 14;

    public final int getCurrentPlayer = 15;

    public final int placeInitialPieces = 16;

    public final int addDeadPieceToEnemy = 17;

    public final int countPiecesWithRank = 18;

    public final int middlePositionsAreFree = 19;

    public final int initPieceConfigurations = 20;

    public final int nr_functions = 21;


    public StrategoSentinel () throws CGException {}


    public StrategoSentinel (EvaluatePP instance) throws CGException {
      init(nr_functions, instance);
    }

  }
// ***** VDMTOOLS END Name=StrategoSentinel
;

// ***** VDMTOOLS START Name=evaluatePP#1|int KEEP=NO
  public Boolean evaluatePP (int fnr) throws CGException {
    return Boolean.TRUE;
  }
// ***** VDMTOOLS END Name=evaluatePP#1|int


// ***** VDMTOOLS START Name=setSentinel KEEP=NO
  public void setSentinel () {
    try {
      sentinel = new StrategoSentinel(this);
    }
    catch (Exception e) {
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=setSentinel

// ***** VDMTOOLS START Name=SCOUT KEEP=NO
  private static final Number SCOUT = new Integer(2);
// ***** VDMTOOLS END Name=SCOUT


// ***** VDMTOOLS START Name=vdm_init_Stratego KEEP=NO
  private void vdm_init_Stratego () {
    try {
      setSentinel();
      defaultPieces = new ArrayList();
    }
    catch (Exception e) {
      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=vdm_init_Stratego


// ***** VDMTOOLS START Name=Stratego KEEP=NO
  public Stratego () throws CGException {
    try {
      vdm_init_Stratego();
      board = new Board();
      playerOne = new Player(new String("P1"), new quotes.Blue());
      playerTwo = new Player(new String("P2"), new quotes.Red());
      currentPlayer = (Player)UTIL.clone(playerOne);
      gameIsOver = Boolean.FALSE;
      initGame();
      setSentinel();
    }
    catch (Throwable e) {
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=Stratego


// ***** VDMTOOLS START Name=initPieceConfigurations KEEP=NO
  private void initPieceConfigurations () throws CGException {
    sentinel.entering(((StrategoSentinel)sentinel).initPieceConfigurations);
    try {
      if (!this.pre_initPieceConfigurations().booleanValue()) 
        UTIL.RunTime("Precondition failure in initPieceConfigurations");
      List tmpSeq_2 = new ArrayList();
      tmpSeq_2.add(new PieceConf(new String("FLAG"), new Integer(0), new Double(1)));
      tmpSeq_2.add(new PieceConf(new String("SPY"), new Integer(1), new Double(1)));
      tmpSeq_2.add(new PieceConf(new String("SCOUT"), new Integer(2), new Double(8)));
      tmpSeq_2.add(new PieceConf(new String("MINER"), new Integer(3), new Double(5)));
      tmpSeq_2.add(new PieceConf(new String("SERGEANT"), new Integer(4), new Double(4)));
      tmpSeq_2.add(new PieceConf(new String("LIUTENANT"), new Integer(5), new Double(4)));
      tmpSeq_2.add(new PieceConf(new String("CAPTAIN"), new Integer(6), new Double(4)));
      tmpSeq_2.add(new PieceConf(new String("MAJOR"), new Integer(7), new Double(3)));
      tmpSeq_2.add(new PieceConf(new String("COLONEL"), new Integer(8), new Double(2)));
      tmpSeq_2.add(new PieceConf(new String("GENERAL"), new Integer(9), new Double(1)));
      tmpSeq_2.add(new PieceConf(new String("MARSHAL"), new Integer(10), new Double(1)));
      tmpSeq_2.add(new PieceConf(new String("BOMB"), new Integer(11), new Double(6)));
      defaultPieces = UTIL.ConvertToList(UTIL.clone(tmpSeq_2));
    }
    finally {
      sentinel.leaving(((StrategoSentinel)sentinel).initPieceConfigurations);
    }
  }
// ***** VDMTOOLS END Name=initPieceConfigurations


// ***** VDMTOOLS START Name=pre_initPieceConfigurations KEEP=NO
  private Boolean pre_initPieceConfigurations () throws CGException {
    return Boolean.valueOf(UTIL.equals(defaultPieces, new ArrayList()));
  }
// ***** VDMTOOLS END Name=pre_initPieceConfigurations


// ***** VDMTOOLS START Name=initGame KEEP=NO
  public void initGame () throws CGException {
    sentinel.entering(((StrategoSentinel)sentinel).initGame);
    try {
      if (!this.pre_initGame().booleanValue()) 
        UTIL.RunTime("Precondition failure in initGame");
      initPieceConfigurations();
      givePiecesP1();
      givePiecesP2();
    }
    finally {
      sentinel.leaving(((StrategoSentinel)sentinel).initGame);
    }
  }
// ***** VDMTOOLS END Name=initGame


// ***** VDMTOOLS START Name=pre_initGame KEEP=NO
  public Boolean pre_initGame () throws CGException {
    Boolean varRes_1 = null;
    Boolean var1_2 = null;
    if ((var1_2 = Boolean.valueOf(UTIL.equals(defaultPieces, new ArrayList()))).booleanValue()) 
      var1_2 = Boolean.valueOf(UTIL.equals(playerOne.getPieces(), new ArrayList()));
    if ((varRes_1 = var1_2).booleanValue()) 
      varRes_1 = Boolean.valueOf(UTIL.equals(playerTwo.getPieces(), new ArrayList()));
    return varRes_1;
  }
// ***** VDMTOOLS END Name=pre_initGame


// ***** VDMTOOLS START Name=givePiecesP1 KEEP=NO
  public void givePiecesP1 () throws CGException {
    sentinel.entering(((StrategoSentinel)sentinel).givePiecesP1);
    try {
      if (!this.pre_givePiecesP1().booleanValue()) 
        UTIL.RunTime("Precondition failure in givePiecesP1");
      givePieces(new quotes.Blue(), playerOne);
    }
    finally {
      sentinel.leaving(((StrategoSentinel)sentinel).givePiecesP1);
    }
  }
// ***** VDMTOOLS END Name=givePiecesP1


// ***** VDMTOOLS START Name=pre_givePiecesP1 KEEP=NO
  public Boolean pre_givePiecesP1 () throws CGException {
    return Boolean.valueOf(UTIL.equals(playerOne.getPieces(), new ArrayList()));
  }
// ***** VDMTOOLS END Name=pre_givePiecesP1


// ***** VDMTOOLS START Name=givePiecesP2 KEEP=NO
  public void givePiecesP2 () throws CGException {
    sentinel.entering(((StrategoSentinel)sentinel).givePiecesP2);
    try {
      if (!this.pre_givePiecesP2().booleanValue()) 
        UTIL.RunTime("Precondition failure in givePiecesP2");
      givePieces(new quotes.Red(), playerTwo);
    }
    finally {
      sentinel.leaving(((StrategoSentinel)sentinel).givePiecesP2);
    }
  }
// ***** VDMTOOLS END Name=givePiecesP2


// ***** VDMTOOLS START Name=pre_givePiecesP2 KEEP=NO
  public Boolean pre_givePiecesP2 () throws CGException {
    return Boolean.valueOf(UTIL.equals(playerTwo.getPieces(), new ArrayList()));
  }
// ***** VDMTOOLS END Name=pre_givePiecesP2


// ***** VDMTOOLS START Name=givePieces#2|Object|Player KEEP=NO
  private void givePieces (final Object color, final Player player) throws CGException {
    sentinel.entering(((StrategoSentinel)sentinel).givePieces);
    try {
      if (!this.pre_givePieces(color, player).booleanValue()) 
        UTIL.RunTime("Precondition failure in givePieces");
      {
        Set iset_7 = new HashSet(defaultPieces);
        Set tmpSet_29 = new HashSet(iset_7);
        for (Iterator enm_28 = tmpSet_29.iterator(); enm_28.hasNext(); ) {
          PieceConf elem_3 = (PieceConf)enm_28.next();
          PieceConf pieceConf = null;
          /* pieceConf */
          pieceConf = elem_3;
          {
            Set iset_10 = new HashSet();
            iset_10 = new HashSet();
            Number ub_17 = (pieceConf.quantity);
            if (!UTIL.IsInteger(ub_17)) 
              UTIL.RunTime("Upper bound was not an integer in set range expression");
            int ubi_16 = UTIL.NumberToInt(ub_17).intValue();
            for (int count_14 = 1; count_14 <= ubi_16; count_14++) 
              iset_10.add(new Integer(count_14));
            Set iset_18 = iset_10;
            Set tmpSet_27 = new HashSet(iset_18);
            for (Iterator enm_26 = tmpSet_27.iterator(); enm_26.hasNext(); ) {
              Number elem_8 = UTIL.NumberToInt(enm_26.next());
              Number i = null;
              /* i */
              i = elem_8;
              Number arg_21 = null;
              arg_21 = pieceConf.rank;
              String arg_23 = null;
              arg_23 = pieceConf.name;
              player.addPiece(new Piece(arg_21, color, arg_23));
            }
          }
        }
      }
    }
    finally {
      sentinel.leaving(((StrategoSentinel)sentinel).givePieces);
    }
  }
// ***** VDMTOOLS END Name=givePieces#2|Object|Player


// ***** VDMTOOLS START Name=pre_givePieces#2|Object|Player KEEP=NO
  private Boolean pre_givePieces (final Object color, final Player player) throws CGException {
    Boolean varRes_3 = null;
    Boolean var1_4 = null;
    Set var2_7 = new HashSet();
    var2_7.add(new quotes.Blue());
    var2_7.add(new quotes.Red());
    if ((var1_4 = Boolean.valueOf(UTIL.Contains(var2_7, color))).booleanValue()) 
      var1_4 = Boolean.valueOf(UTIL.equals(player, playerOne));
    if (!(varRes_3 = var1_4).booleanValue()) 
      varRes_3 = Boolean.valueOf(UTIL.equals(player, playerTwo));
    return varRes_3;
  }
// ***** VDMTOOLS END Name=pre_givePieces#2|Object|Player


// ***** VDMTOOLS START Name=countPiecesWithRank#2|List|Number KEEP=NO
  private Number countPiecesWithRank (final List pieces, final Number rank) throws CGException {
    sentinel.entering(((StrategoSentinel)sentinel).countPiecesWithRank);
    try {
      if (!this.pre_countPiecesWithRank(pieces, rank).booleanValue()) 
        UTIL.RunTime("Precondition failure in countPiecesWithRank");
      {
        Number counter = null;
        counter = new Integer(0);
        {
          Set iset_8 = new HashSet(pieces);
          Set tmpSet_16 = new HashSet(iset_8);
          for (Iterator enm_15 = tmpSet_16.iterator(); enm_15.hasNext(); ) {
            Piece elem_4 = (Piece)enm_15.next();
            Piece piece = null;
            /* piece */
            piece = elem_4;
            if (piece.getRank().intValue() == rank.intValue()) 
              counter = new Integer(counter.intValue() + 1);
          }
        }
        return counter;
      }
    }
    finally {
      sentinel.leaving(((StrategoSentinel)sentinel).countPiecesWithRank);
    }
  }
// ***** VDMTOOLS END Name=countPiecesWithRank#2|List|Number


// ***** VDMTOOLS START Name=pre_countPiecesWithRank#2|List|Number KEEP=NO
  private Boolean pre_countPiecesWithRank (final List pieces, final Number rank) throws CGException {
    Boolean varRes_3 = null;
    Set var2_6 = new HashSet();
    var2_6 = new HashSet();
    for (int count_9 = 0; count_9 <= 12; count_9++) 
      var2_6.add(new Integer(count_9));
    if ((varRes_3 = Boolean.valueOf(UTIL.Contains(var2_6, rank))).booleanValue()) 
      varRes_3 = Boolean.valueOf(!(pieces.size() == 0));
    return varRes_3;
  }
// ***** VDMTOOLS END Name=pre_countPiecesWithRank#2|List|Number


// ***** VDMTOOLS START Name=placeInitialPieces KEEP=NO
  public void placeInitialPieces () throws CGException {
    sentinel.entering(((StrategoSentinel)sentinel).placeInitialPieces);
    try {
      if (!this.pre_placeInitialPieces().booleanValue()) 
        UTIL.RunTime("Precondition failure in placeInitialPieces");
      board.placePiecesP1(playerOne.getPieces());
      playerOne.removePieces();
      board.placePiecesP2(playerTwo.getPieces());
      playerTwo.removePieces();
    }
    finally {
      sentinel.leaving(((StrategoSentinel)sentinel).placeInitialPieces);
    }
  }
// ***** VDMTOOLS END Name=placeInitialPieces


// ***** VDMTOOLS START Name=pre_placeInitialPieces KEEP=NO
  public Boolean pre_placeInitialPieces () throws CGException {
    Boolean varRes_1 = null;
    Boolean var1_2 = null;
    if ((var1_2 = Boolean.valueOf(board.getNumberPiecesOnBoard().intValue() == 0)).booleanValue()) 
      var1_2 = Boolean.valueOf(!UTIL.equals(playerOne.getPieces(), new ArrayList()));
    if ((varRes_1 = var1_2).booleanValue()) 
      varRes_1 = Boolean.valueOf(!UTIL.equals(playerTwo.getPieces(), new ArrayList()));
    return varRes_1;
  }
// ***** VDMTOOLS END Name=pre_placeInitialPieces


// ***** VDMTOOLS START Name=getPlayerOne KEEP=NO
  public Player getPlayerOne () throws CGException {
    sentinel.entering(((StrategoSentinel)sentinel).getPlayerOne);
    try {
      return playerOne;
    }
    finally {
      sentinel.leaving(((StrategoSentinel)sentinel).getPlayerOne);
    }
  }
// ***** VDMTOOLS END Name=getPlayerOne


// ***** VDMTOOLS START Name=getPlayerTwo KEEP=NO
  public Player getPlayerTwo () throws CGException {
    sentinel.entering(((StrategoSentinel)sentinel).getPlayerTwo);
    try {
      return playerTwo;
    }
    finally {
      sentinel.leaving(((StrategoSentinel)sentinel).getPlayerTwo);
    }
  }
// ***** VDMTOOLS END Name=getPlayerTwo


// ***** VDMTOOLS START Name=getCurrentPlayer KEEP=NO
  public Player getCurrentPlayer () throws CGException {
    sentinel.entering(((StrategoSentinel)sentinel).getCurrentPlayer);
    try {
      return currentPlayer;
    }
    finally {
      sentinel.leaving(((StrategoSentinel)sentinel).getCurrentPlayer);
    }
  }
// ***** VDMTOOLS END Name=getCurrentPlayer


// ***** VDMTOOLS START Name=getBoard KEEP=NO
  public Board getBoard () throws CGException {
    sentinel.entering(((StrategoSentinel)sentinel).getBoard);
    try {
      return board;
    }
    finally {
      sentinel.leaving(((StrategoSentinel)sentinel).getBoard);
    }
  }
// ***** VDMTOOLS END Name=getBoard


// ***** VDMTOOLS START Name=makeMove#2|Coord|Coord KEEP=NO
  public Number makeMove (final Coord srcPos, final Coord destPos) throws CGException {
    sentinel.entering(((StrategoSentinel)sentinel).makeMove);
    try {
      Piece srcPiece = null;
      Piece destPiece = null;
      Number result = null;
      Boolean cond_3 = null;
      if (!(cond_3 = board.isPositionFree(srcPos)).booleanValue()) 
        cond_3 = board.isPositionLake(srcPos);
      if (cond_3.booleanValue()) 
        return new Integer(1);
      Object rhs_11 = board.getPieceAtPosition(srcPos);
      if (!(rhs_11 instanceof Piece)) 
        UTIL.RunTime("Incompatible type");
      srcPiece = (Piece)UTIL.clone(rhs_11);
      if (!UTIL.equals(srcPiece.getColor(), currentPlayer.getColor())) 
        return new Integer(2);
      else {
        if (board.isPositionLake(destPos).booleanValue()) 
          return new Integer(3);
      }
      if (!board.isPositionFree(destPos).booleanValue()) {
        Object rhs_24 = board.getPieceAtPosition(destPos);
        if (!(rhs_24 instanceof Piece)) 
          UTIL.RunTime("Incompatible type");
        destPiece = (Piece)UTIL.clone(rhs_24);
        if (UTIL.equals(destPiece.getColor(), currentPlayer.getColor())) 
          return new Integer(6);
      }
      result = UTIL.NumberToInt(UTIL.clone(moveIsValid(srcPos, destPos, srcPiece)));
      if (result.intValue() == 0) {
        if (board.isPositionFree(destPos).booleanValue()) {
          board.movePiece(srcPos, destPos);
          return result;
        }
        else {
          makeBattle(srcPos, destPos, srcPiece, destPiece);
          return new Integer(0);
        }
      }
      else 
        return result;
    }
    finally {
      sentinel.leaving(((StrategoSentinel)sentinel).makeMove);
    }
  }
// ***** VDMTOOLS END Name=makeMove#2|Coord|Coord


// ***** VDMTOOLS START Name=makeBattle#4|Coord|Coord|Piece|Piece KEEP=NO
  private void makeBattle (final Coord srcPos, final Coord destPos, final Piece srcPiece, final Piece destPiece) throws CGException {
    sentinel.entering(((StrategoSentinel)sentinel).makeBattle);
    try {
      Boolean cond_5 = null;
      Boolean var1_6 = null;
      if ((var1_6 = Boolean.valueOf(UTIL.equals(srcPiece.getName(), new String("MINER")))).booleanValue()) 
        var1_6 = Boolean.valueOf(UTIL.equals(destPiece.getName(), new String("BOMB")));
      if (!(cond_5 = var1_6).booleanValue()) {
        Boolean var2_13 = null;
        if ((var2_13 = Boolean.valueOf(UTIL.equals(srcPiece.getName(), new String("SPY")))).booleanValue()) 
          var2_13 = Boolean.valueOf(UTIL.equals(destPiece.getName(), new String("MARSHAL")));
        cond_5 = var2_13;
      }
      if (cond_5.booleanValue()) 
        makeBattleAux(srcPos, destPos, destPiece);
      else {
        if (srcPiece.getRank().intValue() == destPiece.getRank().intValue()) {
          board.removePiece(srcPos);
          board.removePiece(destPos);
          currentPlayer.addDeadPiece(srcPiece);
          addDeadPieceToEnemy(destPiece);
        }
        else {
          Boolean cond_34 = null;
          if ((cond_34 = Boolean.valueOf(srcPiece.getRank().intValue() > destPiece.getRank().intValue())).booleanValue()) 
            cond_34 = Boolean.valueOf(!UTIL.equals(destPiece.getName(), new String("FLAG")));
          if (cond_34.booleanValue()) {
            Piece obj_44 = board.getPieceAtPosition(srcPos);
            obj_44.wasSpoted();
            makeBattleAux(srcPos, destPos, destPiece);
          }
          else {
            if (srcPiece.getRank().intValue() < destPiece.getRank().intValue()) {
              board.removePiece(srcPos);
              currentPlayer.addDeadPiece(srcPiece);
              Piece obj_33 = board.getPieceAtPosition(destPos);
              obj_33.wasSpoted();
            }
          }
        }
        if (UTIL.equals(destPiece.getName(), new String("FLAG"))) {
          Piece obj_63 = board.getPieceAtPosition(destPos);
          obj_63.wasSpoted();
          gameOver();
        }
      }
    }
    finally {
      sentinel.leaving(((StrategoSentinel)sentinel).makeBattle);
    }
  }
// ***** VDMTOOLS END Name=makeBattle#4|Coord|Coord|Piece|Piece


// ***** VDMTOOLS START Name=makeBattleAux#3|Coord|Coord|Piece KEEP=NO
  private void makeBattleAux (final Coord srcPos, final Coord destPos, final Piece destPiece) throws CGException {
    sentinel.entering(((StrategoSentinel)sentinel).makeBattleAux);
    try {
      board.removePiece(destPos);
      board.movePiece(srcPos, destPos);
      addDeadPieceToEnemy(destPiece);
    }
    finally {
      sentinel.leaving(((StrategoSentinel)sentinel).makeBattleAux);
    }
  }
// ***** VDMTOOLS END Name=makeBattleAux#3|Coord|Coord|Piece


// ***** VDMTOOLS START Name=addDeadPieceToEnemy#1|Piece KEEP=NO
  private void addDeadPieceToEnemy (final Piece piece) throws CGException {
    sentinel.entering(((StrategoSentinel)sentinel).addDeadPieceToEnemy);
    try {
      if (UTIL.equals(currentPlayer, playerOne)) 
        playerTwo.addDeadPiece(piece);
      else 
        playerOne.addDeadPiece(piece);
    }
    finally {
      sentinel.leaving(((StrategoSentinel)sentinel).addDeadPieceToEnemy);
    }
  }
// ***** VDMTOOLS END Name=addDeadPieceToEnemy#1|Piece


// ***** VDMTOOLS START Name=moveIsValid#3|Coord|Coord|Piece KEEP=NO
  public Number moveIsValid (final Coord srcPos, final Coord destPos, final Piece srcPiece) throws CGException {
    sentinel.entering(((StrategoSentinel)sentinel).moveIsValid);
    try {
      Boolean cond_4 = null;
      if ((cond_4 = Boolean.valueOf(!(srcPos.getX().intValue() == destPos.getX().intValue()))).booleanValue()) 
        cond_4 = Boolean.valueOf(!(srcPos.getY().intValue() == destPos.getY().intValue()));
      if (cond_4.booleanValue()) 
        return new Integer(11);
      Set var2_14 = new HashSet();
      var2_14.add(new String("FLAG"));
      var2_14.add(new String("BOMB"));
      if (UTIL.Contains(var2_14, srcPiece.getName())) 
        return new Integer(12);
      else if (UTIL.equals(srcPiece.getName(), new String("SCOUT"))) {
        if (middlePositionsAreFree(srcPos, destPos).booleanValue()) 
          return new Integer(0);
        else 
          return new Integer(14);
      }
      else {
        Boolean cond_17 = null;
        if (!(cond_17 = Boolean.valueOf(Math.abs((destPos.getX().intValue() - srcPos.getX().intValue())) == 1)).booleanValue()) 
          cond_17 = Boolean.valueOf(Math.abs((destPos.getY().intValue() - srcPos.getY().intValue())) == 1);
        if (cond_17.booleanValue()) 
          return new Integer(0);
        else 
          return new Integer(13);
      }
    }
    finally {
      sentinel.leaving(((StrategoSentinel)sentinel).moveIsValid);
    }
  }
// ***** VDMTOOLS END Name=moveIsValid#3|Coord|Coord|Piece


// ***** VDMTOOLS START Name=middlePositionsAreFree#2|Coord|Coord KEEP=NO
  public Boolean middlePositionsAreFree (final Coord srcPos, final Coord destPos) throws CGException {
    sentinel.entering(((StrategoSentinel)sentinel).middlePositionsAreFree);
    try {
      List positions = null;
      if (srcPos.getY().intValue() > destPos.getY().intValue()) {
        List tmpSeq_52 = new ArrayList();
        for (int count_53 = (destPos.getY().intValue() + 1); count_53 <= (srcPos.getY().intValue() - 1); count_53++) {
          Number y = new Integer(count_53);
          Number arg_61 = null;
          arg_61 = srcPos.getX();
          tmpSeq_52.add(new Coord(arg_61, y));
        }
        positions = UTIL.ConvertToList(UTIL.clone(tmpSeq_52));
      }
      else if (srcPos.getY().intValue() < destPos.getY().intValue()) {
        List tmpSeq_40 = new ArrayList();
        for (int count_41 = (srcPos.getY().intValue() + 1); count_41 <= (destPos.getY().intValue() - 1); count_41++) {
          Number y = new Integer(count_41);
          Number arg_49 = null;
          arg_49 = srcPos.getX();
          tmpSeq_40.add(new Coord(arg_49, y));
        }
        positions = UTIL.ConvertToList(UTIL.clone(tmpSeq_40));
      }
      else {
        if (srcPos.getX().intValue() > destPos.getX().intValue()) {
          List tmpSeq_25 = new ArrayList();
          for (int count_26 = (destPos.getX().intValue() + 1); count_26 <= (srcPos.getX().intValue() - 1); count_26++) {
            Number x = new Integer(count_26);
            Number arg_35 = null;
            arg_35 = srcPos.getY();
            tmpSeq_25.add(new Coord(x, arg_35));
          }
          positions = UTIL.ConvertToList(UTIL.clone(tmpSeq_25));
        }
        else {
          if (srcPos.getX().intValue() < destPos.getX().intValue()) {
            List tmpSeq_10 = new ArrayList();
            for (int count_11 = (srcPos.getX().intValue() + 1); count_11 <= (destPos.getX().intValue() - 1); count_11++) {
              Number x = new Integer(count_11);
              Number arg_20 = null;
              arg_20 = srcPos.getY();
              tmpSeq_10.add(new Coord(x, arg_20));
            }
            positions = UTIL.ConvertToList(UTIL.clone(tmpSeq_10));
          }
        }
      }
      {
        Set iset_67 = new HashSet(positions);
        Set tmpSet_73 = new HashSet(iset_67);
        for (Iterator enm_72 = tmpSet_73.iterator(); enm_72.hasNext(); ) {
          Coord elem_63 = (Coord)enm_72.next();
          Coord position = null;
          /* position */
          position = elem_63;
          if (!board.isPositionFree(position).booleanValue()) 
            return Boolean.FALSE;
        }
      }
      return Boolean.TRUE;
    }
    finally {
      sentinel.leaving(((StrategoSentinel)sentinel).middlePositionsAreFree);
    }
  }
// ***** VDMTOOLS END Name=middlePositionsAreFree#2|Coord|Coord


// ***** VDMTOOLS START Name=updateTurn KEEP=NO
  public void updateTurn () throws CGException {
    sentinel.entering(((StrategoSentinel)sentinel).updateTurn);
    try {
      if (UTIL.equals(currentPlayer, playerOne)) 
        currentPlayer = (Player)UTIL.clone(playerTwo);
      else 
        currentPlayer = (Player)UTIL.clone(playerOne);
    }
    finally {
      sentinel.leaving(((StrategoSentinel)sentinel).updateTurn);
    }
  }
// ***** VDMTOOLS END Name=updateTurn


// ***** VDMTOOLS START Name=gameOver KEEP=NO
  public void gameOver () throws CGException {
    sentinel.entering(((StrategoSentinel)sentinel).gameOver);
    try {
      if (!this.pre_gameOver().booleanValue()) 
        UTIL.RunTime("Precondition failure in gameOver");
      gameIsOver = Boolean.TRUE;
    }
    finally {
      sentinel.leaving(((StrategoSentinel)sentinel).gameOver);
    }
  }
// ***** VDMTOOLS END Name=gameOver


// ***** VDMTOOLS START Name=pre_gameOver KEEP=NO
  public Boolean pre_gameOver () throws CGException {
    return Boolean.valueOf(UTIL.equals(gameIsOver, Boolean.FALSE));
  }
// ***** VDMTOOLS END Name=pre_gameOver


// ***** VDMTOOLS START Name=isGameOver KEEP=NO
  public Boolean isGameOver () throws CGException {
    sentinel.entering(((StrategoSentinel)sentinel).isGameOver);
    try {
      return gameIsOver;
    }
    finally {
      sentinel.leaving(((StrategoSentinel)sentinel).isGameOver);
    }
  }
// ***** VDMTOOLS END Name=isGameOver

}
;
